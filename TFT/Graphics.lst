
Graphics.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00800100  00001b62  00001bf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  008001fa  008001fa  00001cf0  2**0
                  ALLOC
  3 .stab         00004b6c  00000000  00000000  00001cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003063  00000000  00000000  0000685c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  000098bf  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__ctors_end>
       4:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
       8:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
       c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      10:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      14:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      18:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      1c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      20:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      24:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      28:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      2c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      30:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      34:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      38:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      3c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      40:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      44:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      48:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      4c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      50:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      54:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      58:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      5c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      60:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      64:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      68:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      6c:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      70:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      74:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>
      78:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__bad_interrupt>

0000007c <ascii>:
	...
      84:	00 20 20 20 20 20 00 20 00 50 50 a0 00 00 00 00     .     . .PP.....
      94:	00 50 50 f8 50 f8 50 50 00 20 70 a0 70 28 a8 70     .PP.P.PP. p.p(.p
      a4:	00 c8 c8 10 20 40 98 98 00 40 a0 a0 48 a8 90 68     .... @...@..H..h
      b4:	00 30 10 20 00 00 00 00 00 10 20 40 40 40 20 10     .0. ...... @@@ .
      c4:	00 40 20 10 10 10 20 40 00 20 a8 a8 70 a8 a8 20     .@ ... @. ..p.. 
      d4:	00 20 20 20 f8 20 20 20 00 00 00 00 00 30 10 20     .   .   .....0. 
      e4:	00 00 00 00 f8 00 00 00 00 00 00 00 00 00 60 60     ..............``
      f4:	00 08 08 10 20 40 80 80 00 30 48 48 48 48 48 30     .... @...0HHHHH0
     104:	00 10 30 10 10 10 10 10 00 30 48 08 10 20 40 78     ..0......0H.. @x
     114:	00 30 48 08 30 08 48 30 00 10 30 50 50 90 f8 10     .0H.0.H0..0PP...
     124:	00 78 40 70 48 08 48 30 00 30 48 40 70 48 48 30     .x@pH.H0.0H@pHH0
     134:	00 78 08 08 10 10 20 20 00 30 48 48 30 48 48 30     .x....  .0HH0HH0
     144:	00 30 48 48 38 08 48 30 00 00 30 30 00 30 30 00     .0HH8.H0..00.00.
     154:	00 00 30 30 00 30 10 20 00 08 10 20 40 20 10 08     ..00.0. ... @ ..
     164:	00 00 f0 00 00 f0 00 00 00 80 40 20 10 20 40 80     ..........@ . @.
     174:	00 70 88 88 10 20 00 20 00 70 88 e8 a8 e8 90 78     .p... . .p.....x
     184:	00 60 20 20 50 50 70 d8 00 f0 48 48 78 48 48 f8     .`  PPp...HHxHH.
     194:	00 70 48 80 80 80 c8 78 00 f0 50 48 48 48 58 f0     .pH....x..PHHHX.
     1a4:	00 f8 48 40 70 40 40 f8 00 f8 48 40 70 50 40 e0     ..H@p@@...H@pP@.
     1b4:	00 70 48 80 80 98 c8 78 00 d8 50 50 70 50 50 d8     .pH....x..PPpPP.
     1c4:	00 70 20 20 20 20 20 70 00 70 10 10 10 10 90 60     .p     p.p.....`
     1d4:	00 d8 50 50 60 60 50 d8 00 f0 40 40 40 40 48 f8     ..PP``P...@@@@H.
     1e4:	00 88 d8 d8 a8 a8 88 88 00 88 c8 a8 a8 a8 98 88     ................
     1f4:	00 70 50 88 88 88 d8 70 00 f0 48 48 78 40 40 e0     .pP....p..HHx@@.
     204:	00 70 88 88 88 98 70 38 00 f0 48 48 78 50 50 d8     .p....p8..HHxPP.
     214:	00 70 88 80 70 08 08 78 00 f8 a8 20 20 20 20 30     .p..p..x...    0
     224:	00 d8 50 50 50 50 50 70 00 d8 50 50 50 50 70 20     ..PPPPPp..PPPPp 
     234:	00 88 88 a8 a8 a8 50 50 00 d8 50 50 20 50 50 d8     ......PP..PP PP.
     244:	00 d8 50 50 50 20 20 70 00 f8 90 10 20 40 48 f8     ..PPP  p.... @H.
     254:	00 70 40 40 40 40 40 70 00 80 80 40 20 10 08 08     .p@@@@@p...@ ...
     264:	00 70 10 10 10 10 10 70 00 20 50 00 00 00 00 00     .p.....p. P.....
     274:	00 00 00 00 00 00 00 f8 00 20 10 00 00 00 00 00     ......... ......
     284:	00 00 00 60 90 70 90 68 00 80 80 e0 90 90 90 e0     ...`.p.h........
     294:	00 00 00 60 90 80 90 60 00 10 10 70 90 90 90 70     ...`...`...p...p
     2a4:	00 00 00 60 90 f0 80 60 00 10 20 70 20 20 20 20     ...`...`.. p    
     2b4:	00 68 90 60 80 70 88 70 00 80 80 e0 90 90 90 90     .h.`.p.p........
     2c4:	00 20 00 20 20 20 20 20 00 10 00 10 10 10 10 60     . .     .......`
     2d4:	00 80 80 90 a0 c0 a0 90 00 20 20 20 20 20 20 18     .........      .
     2e4:	00 00 00 d0 a8 a8 a8 a8 00 00 00 e0 90 90 90 90     ................
     2f4:	00 00 00 60 90 90 90 60 00 00 60 90 90 e0 80 80     ...`...`..`.....
     304:	00 00 60 90 90 70 10 10 00 00 00 b0 c0 80 80 80     ..`..p..........
     314:	00 00 00 70 80 60 10 e0 00 40 40 f0 40 40 40 30     ...p.`...@@.@@@0
     324:	00 00 00 90 90 90 90 70 00 00 00 88 88 88 50 20     .......p......P 
     334:	00 00 00 a8 a8 a8 50 50 00 00 00 88 50 20 50 88     ......PP....P P.
     344:	00 00 00 88 50 20 20 c0 00 00 00 f8 10 20 40 f8     ....P  ...... @.
     354:	00 30 20 20 40 20 20 30 00 20 20 20 20 20 20 20     .0  @  0.       
     364:	00 60 20 20 10 20 20 60 00 68 90 00 00 00 00 00     .`  .  `.h......
	...

0000037c <__ctors_start>:
     37c:	72 0b       	sbc	r23, r18

0000037e <__ctors_end>:
     37e:	11 24       	eor	r1, r1
     380:	1f be       	out	0x3f, r1	; 63
     382:	cf ef       	ldi	r28, 0xFF	; 255
     384:	d0 e1       	ldi	r29, 0x10	; 16
     386:	de bf       	out	0x3e, r29	; 62
     388:	cd bf       	out	0x3d, r28	; 61

0000038a <__do_copy_data>:
     38a:	11 e0       	ldi	r17, 0x01	; 1
     38c:	a0 e0       	ldi	r26, 0x00	; 0
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	e2 e6       	ldi	r30, 0x62	; 98
     392:	fb e1       	ldi	r31, 0x1B	; 27
     394:	02 c0       	rjmp	.+4      	; 0x39a <__do_copy_data+0x10>
     396:	05 90       	lpm	r0, Z+
     398:	0d 92       	st	X+, r0
     39a:	aa 3f       	cpi	r26, 0xFA	; 250
     39c:	b1 07       	cpc	r27, r17
     39e:	d9 f7       	brne	.-10     	; 0x396 <__do_copy_data+0xc>

000003a0 <__do_clear_bss>:
     3a0:	12 e0       	ldi	r17, 0x02	; 2
     3a2:	aa ef       	ldi	r26, 0xFA	; 250
     3a4:	b1 e0       	ldi	r27, 0x01	; 1
     3a6:	01 c0       	rjmp	.+2      	; 0x3aa <.do_clear_bss_start>

000003a8 <.do_clear_bss_loop>:
     3a8:	1d 92       	st	X+, r1

000003aa <.do_clear_bss_start>:
     3aa:	a6 31       	cpi	r26, 0x16	; 22
     3ac:	b1 07       	cpc	r27, r17
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <.do_clear_bss_loop>

000003b0 <__do_global_ctors>:
     3b0:	13 e0       	ldi	r17, 0x03	; 3
     3b2:	ce e7       	ldi	r28, 0x7E	; 126
     3b4:	d3 e0       	ldi	r29, 0x03	; 3
     3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <__do_global_ctors+0x10>
     3b8:	22 97       	sbiw	r28, 0x02	; 2
     3ba:	fe 01       	movw	r30, r28
     3bc:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__tablejump__>
     3c0:	cc 37       	cpi	r28, 0x7C	; 124
     3c2:	d1 07       	cpc	r29, r17
     3c4:	c9 f7       	brne	.-14     	; 0x3b8 <__do_global_ctors+0x8>
     3c6:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <main>
     3ca:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <_exit>

000003ce <__bad_interrupt>:
     3ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d2 <_Z4initv>:
#include <util/delay.h>
#include "tft.h"

void init(void)
{
	DDRB |= 0x80;			// LED
     3d2:	27 9a       	sbi	0x04, 7	; 4
	PORTB |= 0x80;
     3d4:	2f 9a       	sbi	0x05, 7	; 5
	tft.init();
     3d6:	0e 94 15 02 	call	0x42a	; 0x42a <_ZN7ili93414initEv>
	tft /= tft.FlipLandscape;
     3da:	62 e0       	ldi	r22, 0x02	; 2
     3dc:	8a ef       	ldi	r24, 0xFA	; 250
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	0e 94 54 08 	call	0x10a8	; 0x10a8 <_ZN5tfthwdVEh>
	virtual void setY(uint16_t n) {y = n;}
	virtual void setXY(uint16_t m, uint16_t n) {x = m; y = n;}
	virtual uint16_t getX(void) {return x;}
	virtual uint16_t getY(void) {return y;}
	virtual void setForeground(uint16_t c) {fc = c;}
	virtual void setBackground(uint16_t c) {bc = c;}
     3e4:	8f e7       	ldi	r24, 0x7F	; 127
     3e6:	96 e6       	ldi	r25, 0x66	; 102
     3e8:	90 93 09 02 	sts	0x0209, r25
     3ec:	80 93 08 02 	sts	0x0208, r24
	virtual void setX(uint16_t n) {x = n;}
	virtual void setY(uint16_t n) {y = n;}
	virtual void setXY(uint16_t m, uint16_t n) {x = m; y = n;}
	virtual uint16_t getX(void) {return x;}
	virtual uint16_t getY(void) {return y;}
	virtual void setForeground(uint16_t c) {fc = c;}
     3f0:	10 92 07 02 	sts	0x0207, r1
     3f4:	10 92 06 02 	sts	0x0206, r1
	tft.setBackground(0x667F);
	tft.setForeground(0x0000);
	tft.clean();
     3f8:	8a ef       	ldi	r24, 0xFA	; 250
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <_ZN5tfthw5cleanEv>
	stdout = tftout();
     400:	0e 94 4d 0a 	call	0x149a	; 0x149a <_Z6tftoutv>
     404:	90 93 0f 02 	sts	0x020F, r25
     408:	80 93 0e 02 	sts	0x020E, r24
	tft++;
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	8a ef       	ldi	r24, 0xFA	; 250
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <_ZN5tfthwppEi>

00000418 <_ZN7ili93414sendEbh>:
	send(1, 0x29);		// Display On
}

void ili9341::send(bool cmd, unsigned char dat)
{
	SEND();
     418:	9f ef       	ldi	r25, 0xFF	; 255
     41a:	97 b9       	out	0x07, r25	; 7
	if (cmd)
     41c:	81 11       	cpse	r24, r1
		LOW(TFT_RS);
     41e:	14 98       	cbi	0x02, 4	; 2
	TFT_WDATA = dat;
     420:	68 b9       	out	0x08, r22	; 8
	LOW(TFT_WR);
     422:	13 98       	cbi	0x02, 3	; 2
	HIGH(TFT_WR);
     424:	13 9a       	sbi	0x02, 3	; 2
	HIGH(TFT_RS);
     426:	14 9a       	sbi	0x02, 4	; 2
     428:	08 95       	ret

0000042a <_ZN7ili93414initEv>:
		send(0, 0x88);		// Column Adress Order, BGR
	}
}

void ili9341::init(void)
{
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
	uint8_t c;
	uint16_t r;

	MCUCR |= 0x80;			// Disable JTAG
     430:	85 b7       	in	r24, 0x35	; 53
     432:	80 68       	ori	r24, 0x80	; 128
     434:	85 bf       	out	0x35, r24	; 53
	MCUCR |= 0x80;			// Thanks to someone point that out
     436:	85 b7       	in	r24, 0x35	; 53
     438:	80 68       	ori	r24, 0x80	; 128
     43a:	85 bf       	out	0x35, r24	; 53

	TFT_PCTRL = 0xFF & ~TFT_FMK;
     43c:	8f e7       	ldi	r24, 0x7F	; 127
     43e:	81 b9       	out	0x01, r24	; 1
	TFT_WCTRL = 0xFF & ~TFT_BLC;	// Disable background light
     440:	8d ef       	ldi	r24, 0xFD	; 253
     442:	82 b9       	out	0x02, r24	; 2
	RECV();
     444:	17 b8       	out	0x07, r1	; 7
     446:	8f ef       	ldi	r24, 0xFF	; 255
     448:	88 b9       	out	0x08, r24	; 8
	LOW(TFT_RST);			// Hardware reset
     44a:	12 98       	cbi	0x02, 2	; 2
	LOW(TFT_CS);
     44c:	10 98       	cbi	0x02, 0	; 2
	HIGH(TFT_WR);
     44e:	13 9a       	sbi	0x02, 3	; 2
	HIGH(TFT_RD);
     450:	15 9a       	sbi	0x02, 5	; 2
	HIGH(TFT_RS);
     452:	14 9a       	sbi	0x02, 4	; 2
	HIGH(TFT_VSY);
     454:	16 9a       	sbi	0x02, 6	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     456:	28 e2       	ldi	r18, 0x28	; 40
     458:	2a 95       	dec	r18
     45a:	f1 f7       	brne	.-4      	; 0x458 <_ZN7ili93414initEv+0x2e>
	_delay_us(10);			// Min: 10us
	HIGH(TFT_RST);
     45c:	12 9a       	sbi	0x02, 2	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     45e:	8f ef       	ldi	r24, 0xFF	; 255
     460:	94 e6       	ldi	r25, 0x64	; 100
     462:	24 e0       	ldi	r18, 0x04	; 4
     464:	81 50       	subi	r24, 0x01	; 1
     466:	90 40       	sbci	r25, 0x00	; 0
     468:	20 40       	sbci	r18, 0x00	; 0
     46a:	e1 f7       	brne	.-8      	; 0x464 <_ZN7ili93414initEv+0x3a>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <_ZN7ili93414initEv+0x44>
     46e:	00 00       	nop
	_delay_ms(120);
	send(1, 0x28);		// Display OFF
     470:	68 e2       	ldi	r22, 0x28	; 40
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(1, 0x11);		// Sleep Out
     478:	61 e1       	ldi	r22, 0x11	; 17
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
     480:	8f ef       	ldi	r24, 0xFF	; 255
     482:	94 e6       	ldi	r25, 0x64	; 100
     484:	24 e0       	ldi	r18, 0x04	; 4
     486:	81 50       	subi	r24, 0x01	; 1
     488:	90 40       	sbci	r25, 0x00	; 0
     48a:	20 40       	sbci	r18, 0x00	; 0
     48c:	e1 f7       	brne	.-8      	; 0x486 <_ZN7ili93414initEv+0x5c>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <_ZN7ili93414initEv+0x66>
     490:	00 00       	nop
	_delay_ms(120);
	send(1, 0x34);		// Tearing Effect Line OFF
     492:	64 e3       	ldi	r22, 0x34	; 52
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(1, 0x38);		// Idle Mode OFF
     49a:	68 e3       	ldi	r22, 0x38	; 56
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(1, 0x13);		// Normal Display Mode ON
     4a2:	63 e1       	ldi	r22, 0x13	; 19
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(1, 0x20);		// Display Inversion OFF
     4aa:	60 e2       	ldi	r22, 0x20	; 32
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(1, 0x3A);		// COLMOD: Pixel Format Set
     4b2:	6a e3       	ldi	r22, 0x3A	; 58
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(0, 0x55);		// 16 bits/pixel
     4ba:	65 e5       	ldi	r22, 0x55	; 85
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(1, 0x36);		// Memory Access Control
     4c2:	66 e3       	ldi	r22, 0x36	; 54
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(0, 0x48);		// Column Adress Order, BGR
     4ca:	68 e4       	ldi	r22, 0x48	; 72
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(1, 0x2C);		// Memory Write
     4d2:	6c e2       	ldi	r22, 0x2C	; 44
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
     4da:	c0 e4       	ldi	r28, 0x40	; 64
     4dc:	d1 e0       	ldi	r29, 0x01	; 1
     4de:	10 c0       	rjmp	.+32     	; 0x500 <_ZN7ili93414initEv+0xd6>
	for (r = 0; r < 320; r++)	// Black screen
		for (c = 0; c < 240; c++) {
			send(0, 0x00);
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
			send(0, 0x00);
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
			send(0, 0x00);
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
     4f8:	11 50       	subi	r17, 0x01	; 1
	send(0, 0x55);		// 16 bits/pixel
	send(1, 0x36);		// Memory Access Control
	send(0, 0x48);		// Column Adress Order, BGR
	send(1, 0x2C);		// Memory Write
	for (r = 0; r < 320; r++)	// Black screen
		for (c = 0; c < 240; c++) {
     4fa:	91 f7       	brne	.-28     	; 0x4e0 <_ZN7ili93414initEv+0xb6>
     4fc:	21 97       	sbiw	r28, 0x01	; 1
	send(1, 0x3A);		// COLMOD: Pixel Format Set
	send(0, 0x55);		// 16 bits/pixel
	send(1, 0x36);		// Memory Access Control
	send(0, 0x48);		// Column Adress Order, BGR
	send(1, 0x2C);		// Memory Write
	for (r = 0; r < 320; r++)	// Black screen
     4fe:	11 f0       	breq	.+4      	; 0x504 <_ZN7ili93414initEv+0xda>
		send(0, 0x88);		// Column Adress Order, BGR
	}
}

void ili9341::init(void)
{
     500:	10 ef       	ldi	r17, 0xF0	; 240
     502:	ee cf       	rjmp	.-36     	; 0x4e0 <_ZN7ili93414initEv+0xb6>
		for (c = 0; c < 240; c++) {
			send(0, 0x00);
			send(0, 0x00);
			send(0, 0x00);
		}
	send(1, 0x29);		// Display On
     504:	69 e2       	ldi	r22, 0x29	; 41
     506:	81 e0       	ldi	r24, 0x01	; 1
}
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	1f 91       	pop	r17
		for (c = 0; c < 240; c++) {
			send(0, 0x00);
			send(0, 0x00);
			send(0, 0x00);
		}
	send(1, 0x29);		// Display On
     50e:	0c 94 0c 02 	jmp	0x418	; 0x418 <_ZN7ili93414sendEbh>

00000512 <_ZN7ili934110_setOrientEh>:
	TFT_PDATA = 0x00; \
	TFT_WDATA = 0xFF; \
}

void ili9341::_setOrient(uint8_t o)
{
     512:	cf 93       	push	r28
     514:	c8 2f       	mov	r28, r24
	send(1, 0x36);			// Memory Access Control
     516:	66 e3       	ldi	r22, 0x36	; 54
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	switch (o) {
     51e:	c1 30       	cpi	r28, 0x01	; 1
     520:	41 f0       	breq	.+16     	; 0x532 <_ZN7ili934110_setOrientEh+0x20>
     522:	28 f0       	brcs	.+10     	; 0x52e <_ZN7ili934110_setOrientEh+0x1c>
     524:	c2 30       	cpi	r28, 0x02	; 2
     526:	39 f0       	breq	.+14     	; 0x536 <_ZN7ili934110_setOrientEh+0x24>
     528:	c3 30       	cpi	r28, 0x03	; 3
     52a:	61 f4       	brne	.+24     	; 0x544 <_ZN7ili934110_setOrientEh+0x32>
     52c:	06 c0       	rjmp	.+12     	; 0x53a <_ZN7ili934110_setOrientEh+0x28>
	case Landscape:
		send(0, 0x28);		// Column Adress Order, BGR
     52e:	68 e2       	ldi	r22, 0x28	; 40
     530:	05 c0       	rjmp	.+10     	; 0x53c <_ZN7ili934110_setOrientEh+0x2a>
		break;
	case Portrait:
		send(0, 0x48);		// Column Adress Order, BGR
     532:	68 e4       	ldi	r22, 0x48	; 72
     534:	03 c0       	rjmp	.+6      	; 0x53c <_ZN7ili934110_setOrientEh+0x2a>
		break;
	case FlipLandscape:
		send(0, 0xE8);		// Column Adress Order, BGR
     536:	68 ee       	ldi	r22, 0xE8	; 232
     538:	01 c0       	rjmp	.+2      	; 0x53c <_ZN7ili934110_setOrientEh+0x2a>
		break;
	case FlipPortrait:
		send(0, 0x88);		// Column Adress Order, BGR
     53a:	68 e8       	ldi	r22, 0x88	; 136
     53c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     53e:	cf 91       	pop	r28
		break;
	case FlipLandscape:
		send(0, 0xE8);		// Column Adress Order, BGR
		break;
	case FlipPortrait:
		send(0, 0x88);		// Column Adress Order, BGR
     540:	0c 94 0c 02 	jmp	0x418	; 0x418 <_ZN7ili93414sendEbh>
	}
}
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <_ZN7ili93414recvEv>:
}

unsigned char ili9341::recv(void)
{
	unsigned char dat;
	RECV();
     548:	17 b8       	out	0x07, r1	; 7
     54a:	8f ef       	ldi	r24, 0xFF	; 255
     54c:	88 b9       	out	0x08, r24	; 8
	LOW(TFT_RD);
     54e:	15 98       	cbi	0x02, 5	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     550:	84 e0       	ldi	r24, 0x04	; 4
     552:	8a 95       	dec	r24
     554:	f1 f7       	brne	.-4      	; 0x552 <_ZN7ili93414recvEv+0xa>
	_delay_us(1);
	dat = TFT_RDATA;
     556:	86 b1       	in	r24, 0x06	; 6
	HIGH(TFT_RD);
     558:	15 9a       	sbi	0x02, 5	; 2
	return dat;
}
     55a:	08 95       	ret

0000055c <_ZN7ili934111_setBGLightEb>:

void ili9341::_setBGLight(bool ctrl)
{
	if (ctrl)
     55c:	88 23       	and	r24, r24
     55e:	11 f0       	breq	.+4      	; 0x564 <_ZN7ili934111_setBGLightEb+0x8>
		TFT_WCTRL |= TFT_BLC;
     560:	11 9a       	sbi	0x02, 1	; 2
     562:	08 95       	ret
	else
		TFT_WCTRL &= ~TFT_BLC;
     564:	11 98       	cbi	0x02, 1	; 2
     566:	08 95       	ret

00000568 <_ZN5tfthw11putbigint32Ejjhljj>:
	}
}

void tfthw::putbigint32(uint16_t x, uint16_t y, uint8_t z, int32_t i, \
		uint16_t fgc, uint16_t bgc)
{
     568:	2f 92       	push	r2
     56a:	3f 92       	push	r3
     56c:	4f 92       	push	r4
     56e:	5f 92       	push	r5
     570:	6f 92       	push	r6
     572:	7f 92       	push	r7
     574:	8f 92       	push	r8
     576:	9f 92       	push	r9
     578:	af 92       	push	r10
     57a:	bf 92       	push	r11
     57c:	cf 92       	push	r12
     57e:	df 92       	push	r13
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	cd b7       	in	r28, 0x3d	; 61
     58e:	de b7       	in	r29, 0x3e	; 62
     590:	2b 97       	sbiw	r28, 0x0b	; 11
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	f8 94       	cli
     596:	de bf       	out	0x3e, r29	; 62
     598:	0f be       	out	0x3f, r0	; 63
     59a:	cd bf       	out	0x3d, r28	; 61
     59c:	3c 01       	movw	r6, r24
     59e:	7b 87       	std	Y+11, r23	; 0x0b
     5a0:	6a 87       	std	Y+10, r22	; 0x0a
     5a2:	5b 83       	std	Y+3, r21	; 0x03
     5a4:	4a 83       	std	Y+2, r20	; 0x02
     5a6:	29 83       	std	Y+1, r18	; 0x01
     5a8:	17 01       	movw	r2, r14
     5aa:	28 01       	movw	r4, r16
     5ac:	dd 82       	std	Y+5, r13	; 0x05
     5ae:	cc 82       	std	Y+4, r12	; 0x04
     5b0:	bf 82       	std	Y+7, r11	; 0x07
     5b2:	ae 82       	std	Y+6, r10	; 0x06
	uint32_t p = 1000000000;
	if (i < 0) {
     5b4:	17 ff       	sbrs	r17, 7
     5b6:	1e c0       	rjmp	.+60     	; 0x5f4 <_ZN5tfthw11putbigint32Ejjhljj+0x8c>
		putbigch(x, y, z, '-', fgc, bgc);
     5b8:	dc 01       	movw	r26, r24
     5ba:	ed 91       	ld	r30, X+
     5bc:	fc 91       	ld	r31, X
     5be:	02 a0       	ldd	r0, Z+34	; 0x22
     5c0:	f3 a1       	ldd	r31, Z+35	; 0x23
     5c2:	e0 2d       	mov	r30, r0
     5c4:	65 01       	movw	r12, r10
     5c6:	ec 80       	ldd	r14, Y+4	; 0x04
     5c8:	fd 80       	ldd	r15, Y+5	; 0x05
     5ca:	0d e2       	ldi	r16, 0x2D	; 45
     5cc:	09 95       	icall
		x += WIDTH * z;
     5ce:	ea 85       	ldd	r30, Y+10	; 0x0a
     5d0:	fb 85       	ldd	r31, Y+11	; 0x0b
     5d2:	39 81       	ldd	r19, Y+1	; 0x01
     5d4:	26 e0       	ldi	r18, 0x06	; 6
     5d6:	32 9f       	mul	r19, r18
     5d8:	e0 0d       	add	r30, r0
     5da:	f1 1d       	adc	r31, r1
     5dc:	11 24       	eor	r1, r1
     5de:	fb 87       	std	Y+11, r31	; 0x0b
     5e0:	ea 87       	std	Y+10, r30	; 0x0a
		i = abs(i);
     5e2:	37 fe       	sbrs	r3, 7
     5e4:	03 c0       	rjmp	.+6      	; 0x5ec <_ZN5tfthw11putbigint32Ejjhljj+0x84>
     5e6:	31 94       	neg	r3
     5e8:	21 94       	neg	r2
     5ea:	31 08       	sbc	r3, r1
     5ec:	44 24       	eor	r4, r4
     5ee:	37 fc       	sbrc	r3, 7
     5f0:	40 94       	com	r4
     5f2:	54 2c       	mov	r5, r4
	}
}

void tfthw::putbigint32(uint16_t x, uint16_t y, uint8_t z, int32_t i, \
		uint16_t fgc, uint16_t bgc)
{
     5f4:	09 e0       	ldi	r16, 0x09	; 9
     5f6:	10 e0       	ldi	r17, 0x00	; 0
     5f8:	81 2c       	mov	r8, r1
     5fa:	8a ec       	ldi	r24, 0xCA	; 202
     5fc:	98 2e       	mov	r9, r24
     5fe:	8a e9       	ldi	r24, 0x9A	; 154
     600:	a8 2e       	mov	r10, r24
     602:	8b e3       	ldi	r24, 0x3B	; 59
     604:	b8 2e       	mov	r11, r24
		putbigch(x, y, z, '-', fgc, bgc);
		x += WIDTH * z;
		i = abs(i);
	}
	while ((p != 1) && (i / p == 0))
		p /= 10;
     606:	9a e0       	ldi	r25, 0x0A	; 10
     608:	c9 2e       	mov	r12, r25
     60a:	d1 2c       	mov	r13, r1
     60c:	e1 2c       	mov	r14, r1
     60e:	f1 2c       	mov	r15, r1
	if (i < 0) {
		putbigch(x, y, z, '-', fgc, bgc);
		x += WIDTH * z;
		i = abs(i);
	}
	while ((p != 1) && (i / p == 0))
     610:	c2 01       	movw	r24, r4
     612:	b1 01       	movw	r22, r2
     614:	a5 01       	movw	r20, r10
     616:	94 01       	movw	r18, r8
     618:	0e 94 96 0b 	call	0x172c	; 0x172c <__udivmodsi4>
     61c:	23 2b       	or	r18, r19
     61e:	24 2b       	or	r18, r20
     620:	25 2b       	or	r18, r21
     622:	09 f4       	brne	.+2      	; 0x626 <_ZN5tfthw11putbigint32Ejjhljj+0xbe>
     624:	43 c0       	rjmp	.+134    	; 0x6ac <_ZN5tfthw11putbigint32Ejjhljj+0x144>
		p /= 10;
	while (p != 0) {
		putbigch(x, y, z, (i / p) % 10 + '0', fgc, bgc);
		x += WIDTH * z;
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	a6 e0       	ldi	r26, 0x06	; 6
     62a:	8a 9f       	mul	r24, r26
     62c:	c0 01       	movw	r24, r0
     62e:	11 24       	eor	r1, r1
     630:	99 87       	std	Y+9, r25	; 0x09
     632:	88 87       	std	Y+8, r24	; 0x08
     634:	35 c0       	rjmp	.+106    	; 0x6a0 <_ZN5tfthw11putbigint32Ejjhljj+0x138>
		i = abs(i);
	}
	while ((p != 1) && (i / p == 0))
		p /= 10;
	while (p != 0) {
		putbigch(x, y, z, (i / p) % 10 + '0', fgc, bgc);
     636:	d3 01       	movw	r26, r6
     638:	ed 90       	ld	r14, X+
     63a:	fc 90       	ld	r15, X
     63c:	c2 01       	movw	r24, r4
     63e:	b1 01       	movw	r22, r2
     640:	a5 01       	movw	r20, r10
     642:	94 01       	movw	r18, r8
     644:	0e 94 96 0b 	call	0x172c	; 0x172c <__udivmodsi4>
     648:	ca 01       	movw	r24, r20
     64a:	b9 01       	movw	r22, r18
     64c:	2a e0       	ldi	r18, 0x0A	; 10
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	0e 94 96 0b 	call	0x172c	; 0x172c <__udivmodsi4>
     658:	06 2f       	mov	r16, r22
     65a:	00 5d       	subi	r16, 0xD0	; 208
     65c:	d7 01       	movw	r26, r14
     65e:	92 96       	adiw	r26, 0x22	; 34
     660:	ed 91       	ld	r30, X+
     662:	fc 91       	ld	r31, X
     664:	93 97       	sbiw	r26, 0x23	; 35
     666:	ce 80       	ldd	r12, Y+6	; 0x06
     668:	df 80       	ldd	r13, Y+7	; 0x07
     66a:	ec 80       	ldd	r14, Y+4	; 0x04
     66c:	fd 80       	ldd	r15, Y+5	; 0x05
     66e:	29 81       	ldd	r18, Y+1	; 0x01
     670:	4a 81       	ldd	r20, Y+2	; 0x02
     672:	5b 81       	ldd	r21, Y+3	; 0x03
     674:	6a 85       	ldd	r22, Y+10	; 0x0a
     676:	7b 85       	ldd	r23, Y+11	; 0x0b
     678:	c3 01       	movw	r24, r6
     67a:	09 95       	icall
		x += WIDTH * z;
     67c:	ea 85       	ldd	r30, Y+10	; 0x0a
     67e:	fb 85       	ldd	r31, Y+11	; 0x0b
     680:	28 85       	ldd	r18, Y+8	; 0x08
     682:	39 85       	ldd	r19, Y+9	; 0x09
     684:	e2 0f       	add	r30, r18
     686:	f3 1f       	adc	r31, r19
     688:	fb 87       	std	Y+11, r31	; 0x0b
     68a:	ea 87       	std	Y+10, r30	; 0x0a
		p /= 10;
     68c:	c5 01       	movw	r24, r10
     68e:	b4 01       	movw	r22, r8
     690:	2a e0       	ldi	r18, 0x0A	; 10
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	40 e0       	ldi	r20, 0x00	; 0
     696:	50 e0       	ldi	r21, 0x00	; 0
     698:	0e 94 96 0b 	call	0x172c	; 0x172c <__udivmodsi4>
     69c:	49 01       	movw	r8, r18
     69e:	5a 01       	movw	r10, r20
		x += WIDTH * z;
		i = abs(i);
	}
	while ((p != 1) && (i / p == 0))
		p /= 10;
	while (p != 0) {
     6a0:	81 14       	cp	r8, r1
     6a2:	91 04       	cpc	r9, r1
     6a4:	a1 04       	cpc	r10, r1
     6a6:	b1 04       	cpc	r11, r1
     6a8:	31 f6       	brne	.-116    	; 0x636 <_ZN5tfthw11putbigint32Ejjhljj+0xce>
     6aa:	0d c0       	rjmp	.+26     	; 0x6c6 <_ZN5tfthw11putbigint32Ejjhljj+0x15e>
		putbigch(x, y, z, '-', fgc, bgc);
		x += WIDTH * z;
		i = abs(i);
	}
	while ((p != 1) && (i / p == 0))
		p /= 10;
     6ac:	c5 01       	movw	r24, r10
     6ae:	b4 01       	movw	r22, r8
     6b0:	a7 01       	movw	r20, r14
     6b2:	96 01       	movw	r18, r12
     6b4:	0e 94 96 0b 	call	0x172c	; 0x172c <__udivmodsi4>
     6b8:	49 01       	movw	r8, r18
     6ba:	5a 01       	movw	r10, r20
     6bc:	01 50       	subi	r16, 0x01	; 1
     6be:	11 09       	sbc	r17, r1
	if (i < 0) {
		putbigch(x, y, z, '-', fgc, bgc);
		x += WIDTH * z;
		i = abs(i);
	}
	while ((p != 1) && (i / p == 0))
     6c0:	09 f0       	breq	.+2      	; 0x6c4 <_ZN5tfthw11putbigint32Ejjhljj+0x15c>
     6c2:	a6 cf       	rjmp	.-180    	; 0x610 <_ZN5tfthw11putbigint32Ejjhljj+0xa8>
     6c4:	b0 cf       	rjmp	.-160    	; 0x626 <_ZN5tfthw11putbigint32Ejjhljj+0xbe>
	while (p != 0) {
		putbigch(x, y, z, (i / p) % 10 + '0', fgc, bgc);
		x += WIDTH * z;
		p /= 10;
	}
}
     6c6:	2b 96       	adiw	r28, 0x0b	; 11
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	f8 94       	cli
     6cc:	de bf       	out	0x3e, r29	; 62
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	cd bf       	out	0x3d, r28	; 61
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	ff 90       	pop	r15
     6dc:	ef 90       	pop	r14
     6de:	df 90       	pop	r13
     6e0:	cf 90       	pop	r12
     6e2:	bf 90       	pop	r11
     6e4:	af 90       	pop	r10
     6e6:	9f 90       	pop	r9
     6e8:	8f 90       	pop	r8
     6ea:	7f 90       	pop	r7
     6ec:	6f 90       	pop	r6
     6ee:	5f 90       	pop	r5
     6f0:	4f 90       	pop	r4
     6f2:	3f 90       	pop	r3
     6f4:	2f 90       	pop	r2
     6f6:	08 95       	ret

000006f8 <_ZN5tfthw8putint32Ejjljj>:

void tfthw::putint32(uint16_t x, uint16_t y, int32_t i, \
		uint16_t fgc, uint16_t bgc)
{
     6f8:	2f 92       	push	r2
     6fa:	3f 92       	push	r3
     6fc:	4f 92       	push	r4
     6fe:	5f 92       	push	r5
     700:	6f 92       	push	r6
     702:	7f 92       	push	r7
     704:	8f 92       	push	r8
     706:	9f 92       	push	r9
     708:	af 92       	push	r10
     70a:	bf 92       	push	r11
     70c:	cf 92       	push	r12
     70e:	df 92       	push	r13
     710:	ef 92       	push	r14
     712:	ff 92       	push	r15
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	28 97       	sbiw	r28, 0x08	; 8
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61
     72c:	1c 01       	movw	r2, r24
     72e:	78 87       	std	Y+8, r23	; 0x08
     730:	6f 83       	std	Y+7, r22	; 0x07
     732:	5a 83       	std	Y+2, r21	; 0x02
     734:	49 83       	std	Y+1, r20	; 0x01
     736:	28 01       	movw	r4, r16
     738:	39 01       	movw	r6, r18
     73a:	fc 82       	std	Y+4, r15	; 0x04
     73c:	eb 82       	std	Y+3, r14	; 0x03
     73e:	de 82       	std	Y+6, r13	; 0x06
     740:	cd 82       	std	Y+5, r12	; 0x05
	uint32_t p = 1000000000;
	if (i < 0) {
     742:	37 ff       	sbrs	r19, 7
     744:	19 c0       	rjmp	.+50     	; 0x778 <_ZN5tfthw8putint32Ejjljj+0x80>
		putch(x, y, '-', fgc, bgc);
     746:	dc 01       	movw	r26, r24
     748:	ed 91       	ld	r30, X+
     74a:	fc 91       	ld	r31, X
     74c:	00 a0       	ldd	r0, Z+32	; 0x20
     74e:	f1 a1       	ldd	r31, Z+33	; 0x21
     750:	e0 2d       	mov	r30, r0
     752:	76 01       	movw	r14, r12
     754:	0b 81       	ldd	r16, Y+3	; 0x03
     756:	1c 81       	ldd	r17, Y+4	; 0x04
     758:	2d e2       	ldi	r18, 0x2D	; 45
     75a:	09 95       	icall
		x += WIDTH;
     75c:	ef 81       	ldd	r30, Y+7	; 0x07
     75e:	f8 85       	ldd	r31, Y+8	; 0x08
     760:	36 96       	adiw	r30, 0x06	; 6
     762:	f8 87       	std	Y+8, r31	; 0x08
     764:	ef 83       	std	Y+7, r30	; 0x07
		i = abs(i);
     766:	57 fe       	sbrs	r5, 7
     768:	03 c0       	rjmp	.+6      	; 0x770 <_ZN5tfthw8putint32Ejjljj+0x78>
     76a:	51 94       	neg	r5
     76c:	41 94       	neg	r4
     76e:	51 08       	sbc	r5, r1
     770:	66 24       	eor	r6, r6
     772:	57 fc       	sbrc	r5, 7
     774:	60 94       	com	r6
     776:	76 2c       	mov	r7, r6
	}
}

void tfthw::putint32(uint16_t x, uint16_t y, int32_t i, \
		uint16_t fgc, uint16_t bgc)
{
     778:	09 e0       	ldi	r16, 0x09	; 9
     77a:	10 e0       	ldi	r17, 0x00	; 0
     77c:	81 2c       	mov	r8, r1
     77e:	2a ec       	ldi	r18, 0xCA	; 202
     780:	92 2e       	mov	r9, r18
     782:	2a e9       	ldi	r18, 0x9A	; 154
     784:	a2 2e       	mov	r10, r18
     786:	2b e3       	ldi	r18, 0x3B	; 59
     788:	b2 2e       	mov	r11, r18
		putch(x, y, '-', fgc, bgc);
		x += WIDTH;
		i = abs(i);
	}
	while ((p != 1) && (i / p == 0))
		p /= 10;
     78a:	3a e0       	ldi	r19, 0x0A	; 10
     78c:	c3 2e       	mov	r12, r19
     78e:	d1 2c       	mov	r13, r1
     790:	e1 2c       	mov	r14, r1
     792:	f1 2c       	mov	r15, r1
	if (i < 0) {
		putch(x, y, '-', fgc, bgc);
		x += WIDTH;
		i = abs(i);
	}
	while ((p != 1) && (i / p == 0))
     794:	c3 01       	movw	r24, r6
     796:	b2 01       	movw	r22, r4
     798:	a5 01       	movw	r20, r10
     79a:	94 01       	movw	r18, r8
     79c:	0e 94 96 0b 	call	0x172c	; 0x172c <__udivmodsi4>
     7a0:	23 2b       	or	r18, r19
     7a2:	24 2b       	or	r18, r20
     7a4:	25 2b       	or	r18, r21
     7a6:	c1 f1       	breq	.+112    	; 0x818 <_ZN5tfthw8putint32Ejjljj+0x120>
     7a8:	31 c0       	rjmp	.+98     	; 0x80c <_ZN5tfthw8putint32Ejjljj+0x114>
		p /= 10;
	while (p != 0) {
		putch(x, y, (i / p) % 10 + '0', fgc, bgc);
     7aa:	d1 01       	movw	r26, r2
     7ac:	0d 91       	ld	r16, X+
     7ae:	1c 91       	ld	r17, X
     7b0:	c3 01       	movw	r24, r6
     7b2:	b2 01       	movw	r22, r4
     7b4:	a5 01       	movw	r20, r10
     7b6:	94 01       	movw	r18, r8
     7b8:	0e 94 96 0b 	call	0x172c	; 0x172c <__udivmodsi4>
     7bc:	ca 01       	movw	r24, r20
     7be:	b9 01       	movw	r22, r18
     7c0:	2a e0       	ldi	r18, 0x0A	; 10
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	40 e0       	ldi	r20, 0x00	; 0
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	0e 94 96 0b 	call	0x172c	; 0x172c <__udivmodsi4>
     7cc:	26 2f       	mov	r18, r22
     7ce:	20 5d       	subi	r18, 0xD0	; 208
     7d0:	d8 01       	movw	r26, r16
     7d2:	90 96       	adiw	r26, 0x20	; 32
     7d4:	ed 91       	ld	r30, X+
     7d6:	fc 91       	ld	r31, X
     7d8:	91 97       	sbiw	r26, 0x21	; 33
     7da:	ed 80       	ldd	r14, Y+5	; 0x05
     7dc:	fe 80       	ldd	r15, Y+6	; 0x06
     7de:	0b 81       	ldd	r16, Y+3	; 0x03
     7e0:	1c 81       	ldd	r17, Y+4	; 0x04
     7e2:	49 81       	ldd	r20, Y+1	; 0x01
     7e4:	5a 81       	ldd	r21, Y+2	; 0x02
     7e6:	6f 81       	ldd	r22, Y+7	; 0x07
     7e8:	78 85       	ldd	r23, Y+8	; 0x08
     7ea:	c1 01       	movw	r24, r2
     7ec:	09 95       	icall
		x += WIDTH;
     7ee:	ef 81       	ldd	r30, Y+7	; 0x07
     7f0:	f8 85       	ldd	r31, Y+8	; 0x08
     7f2:	36 96       	adiw	r30, 0x06	; 6
     7f4:	f8 87       	std	Y+8, r31	; 0x08
     7f6:	ef 83       	std	Y+7, r30	; 0x07
		p /= 10;
     7f8:	c5 01       	movw	r24, r10
     7fa:	b4 01       	movw	r22, r8
     7fc:	2a e0       	ldi	r18, 0x0A	; 10
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	40 e0       	ldi	r20, 0x00	; 0
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	0e 94 96 0b 	call	0x172c	; 0x172c <__udivmodsi4>
     808:	49 01       	movw	r8, r18
     80a:	5a 01       	movw	r10, r20
		x += WIDTH;
		i = abs(i);
	}
	while ((p != 1) && (i / p == 0))
		p /= 10;
	while (p != 0) {
     80c:	81 14       	cp	r8, r1
     80e:	91 04       	cpc	r9, r1
     810:	a1 04       	cpc	r10, r1
     812:	b1 04       	cpc	r11, r1
     814:	51 f6       	brne	.-108    	; 0x7aa <_ZN5tfthw8putint32Ejjljj+0xb2>
     816:	0d c0       	rjmp	.+26     	; 0x832 <_ZN5tfthw8putint32Ejjljj+0x13a>
		putch(x, y, '-', fgc, bgc);
		x += WIDTH;
		i = abs(i);
	}
	while ((p != 1) && (i / p == 0))
		p /= 10;
     818:	c5 01       	movw	r24, r10
     81a:	b4 01       	movw	r22, r8
     81c:	a7 01       	movw	r20, r14
     81e:	96 01       	movw	r18, r12
     820:	0e 94 96 0b 	call	0x172c	; 0x172c <__udivmodsi4>
     824:	49 01       	movw	r8, r18
     826:	5a 01       	movw	r10, r20
     828:	01 50       	subi	r16, 0x01	; 1
     82a:	11 09       	sbc	r17, r1
	if (i < 0) {
		putch(x, y, '-', fgc, bgc);
		x += WIDTH;
		i = abs(i);
	}
	while ((p != 1) && (i / p == 0))
     82c:	09 f0       	breq	.+2      	; 0x830 <_ZN5tfthw8putint32Ejjljj+0x138>
     82e:	b2 cf       	rjmp	.-156    	; 0x794 <_ZN5tfthw8putint32Ejjljj+0x9c>
     830:	ed cf       	rjmp	.-38     	; 0x80c <_ZN5tfthw8putint32Ejjljj+0x114>
	while (p != 0) {
		putch(x, y, (i / p) % 10 + '0', fgc, bgc);
		x += WIDTH;
		p /= 10;
	}
}
     832:	28 96       	adiw	r28, 0x08	; 8
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	f8 94       	cli
     838:	de bf       	out	0x3e, r29	; 62
     83a:	0f be       	out	0x3f, r0	; 63
     83c:	cd bf       	out	0x3d, r28	; 61
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	ff 90       	pop	r15
     848:	ef 90       	pop	r14
     84a:	df 90       	pop	r13
     84c:	cf 90       	pop	r12
     84e:	bf 90       	pop	r11
     850:	af 90       	pop	r10
     852:	9f 90       	pop	r9
     854:	8f 90       	pop	r8
     856:	7f 90       	pop	r7
     858:	6f 90       	pop	r6
     85a:	5f 90       	pop	r5
     85c:	4f 90       	pop	r4
     85e:	3f 90       	pop	r3
     860:	2f 90       	pop	r2
     862:	08 95       	ret

00000864 <_ZN5tfthw5frameEjjjjhj>:

void tfthw::frame(uint16_t x, uint16_t y, uint16_t w, uint16_t h, \
		uint8_t s, uint16_t c)
{
     864:	2f 92       	push	r2
     866:	3f 92       	push	r3
     868:	4f 92       	push	r4
     86a:	5f 92       	push	r5
     86c:	6f 92       	push	r6
     86e:	7f 92       	push	r7
     870:	8f 92       	push	r8
     872:	9f 92       	push	r9
     874:	af 92       	push	r10
     876:	bf 92       	push	r11
     878:	cf 92       	push	r12
     87a:	df 92       	push	r13
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	00 d0       	rcall	.+0      	; 0x88a <_ZN5tfthw5frameEjjjjhj+0x26>
     88a:	00 d0       	rcall	.+0      	; 0x88c <_ZN5tfthw5frameEjjjjhj+0x28>
     88c:	00 d0       	rcall	.+0      	; 0x88e <_ZN5tfthw5frameEjjjjhj+0x2a>
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	5c 01       	movw	r10, r24
     894:	4b 01       	movw	r8, r22
     896:	3a 01       	movw	r6, r20
     898:	3a 83       	std	Y+2, r19	; 0x02
     89a:	29 83       	std	Y+1, r18	; 0x01
     89c:	1c 83       	std	Y+4, r17	; 0x04
     89e:	0b 83       	std	Y+3, r16	; 0x03
	rectangle(x, y, w - s, s, c);
     8a0:	8e 2d       	mov	r24, r14
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	9e 83       	std	Y+6, r25	; 0x06
     8a6:	8d 83       	std	Y+5, r24	; 0x05
     8a8:	19 01       	movw	r2, r18
     8aa:	28 1a       	sub	r2, r24
     8ac:	39 0a       	sbc	r3, r25
     8ae:	d5 01       	movw	r26, r10
     8b0:	ed 91       	ld	r30, X+
     8b2:	fc 91       	ld	r31, X
     8b4:	04 a4       	ldd	r0, Z+44	; 0x2c
     8b6:	f5 a5       	ldd	r31, Z+45	; 0x2d
     8b8:	e0 2d       	mov	r30, r0
     8ba:	76 01       	movw	r14, r12
     8bc:	8c 01       	movw	r16, r24
     8be:	91 01       	movw	r18, r2
     8c0:	c5 01       	movw	r24, r10
     8c2:	09 95       	icall
	rectangle(x + w - s, y, s, h - s, c);
     8c4:	4b 80       	ldd	r4, Y+3	; 0x03
     8c6:	5c 80       	ldd	r5, Y+4	; 0x04
     8c8:	0d 81       	ldd	r16, Y+5	; 0x05
     8ca:	1e 81       	ldd	r17, Y+6	; 0x06
     8cc:	40 1a       	sub	r4, r16
     8ce:	51 0a       	sbc	r5, r17
     8d0:	d5 01       	movw	r26, r10
     8d2:	ed 91       	ld	r30, X+
     8d4:	fc 91       	ld	r31, X
     8d6:	69 81       	ldd	r22, Y+1	; 0x01
     8d8:	7a 81       	ldd	r23, Y+2	; 0x02
     8da:	68 0d       	add	r22, r8
     8dc:	79 1d       	adc	r23, r9
     8de:	60 1b       	sub	r22, r16
     8e0:	71 0b       	sbc	r23, r17
     8e2:	04 a4       	ldd	r0, Z+44	; 0x2c
     8e4:	f5 a5       	ldd	r31, Z+45	; 0x2d
     8e6:	e0 2d       	mov	r30, r0
     8e8:	82 01       	movw	r16, r4
     8ea:	2d 81       	ldd	r18, Y+5	; 0x05
     8ec:	3e 81       	ldd	r19, Y+6	; 0x06
     8ee:	a3 01       	movw	r20, r6
     8f0:	c5 01       	movw	r24, r10
     8f2:	09 95       	icall
	rectangle(x, y + s, s, h - s, c);
     8f4:	d5 01       	movw	r26, r10
     8f6:	ed 91       	ld	r30, X+
     8f8:	fc 91       	ld	r31, X
     8fa:	4d 81       	ldd	r20, Y+5	; 0x05
     8fc:	5e 81       	ldd	r21, Y+6	; 0x06
     8fe:	46 0d       	add	r20, r6
     900:	57 1d       	adc	r21, r7
     902:	04 a4       	ldd	r0, Z+44	; 0x2c
     904:	f5 a5       	ldd	r31, Z+45	; 0x2d
     906:	e0 2d       	mov	r30, r0
     908:	2d 81       	ldd	r18, Y+5	; 0x05
     90a:	3e 81       	ldd	r19, Y+6	; 0x06
     90c:	b4 01       	movw	r22, r8
     90e:	c5 01       	movw	r24, r10
     910:	09 95       	icall
	rectangle(x + s, y + h - s, w - s, s, c);
     912:	d5 01       	movw	r26, r10
     914:	ed 91       	ld	r30, X+
     916:	fc 91       	ld	r31, X
     918:	4b 81       	ldd	r20, Y+3	; 0x03
     91a:	5c 81       	ldd	r21, Y+4	; 0x04
     91c:	46 0d       	add	r20, r6
     91e:	57 1d       	adc	r21, r7
     920:	8d 81       	ldd	r24, Y+5	; 0x05
     922:	9e 81       	ldd	r25, Y+6	; 0x06
     924:	48 1b       	sub	r20, r24
     926:	59 0b       	sbc	r21, r25
     928:	bc 01       	movw	r22, r24
     92a:	68 0d       	add	r22, r8
     92c:	79 1d       	adc	r23, r9
     92e:	04 a4       	ldd	r0, Z+44	; 0x2c
     930:	f5 a5       	ldd	r31, Z+45	; 0x2d
     932:	e0 2d       	mov	r30, r0
     934:	8c 01       	movw	r16, r24
     936:	91 01       	movw	r18, r2
     938:	c5 01       	movw	r24, r10
     93a:	09 95       	icall
}
     93c:	26 96       	adiw	r28, 0x06	; 6
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	ff 90       	pop	r15
     952:	ef 90       	pop	r14
     954:	df 90       	pop	r13
     956:	cf 90       	pop	r12
     958:	bf 90       	pop	r11
     95a:	af 90       	pop	r10
     95c:	9f 90       	pop	r9
     95e:	8f 90       	pop	r8
     960:	7f 90       	pop	r7
     962:	6f 90       	pop	r6
     964:	5f 90       	pop	r5
     966:	4f 90       	pop	r4
     968:	3f 90       	pop	r3
     96a:	2f 90       	pop	r2
     96c:	08 95       	ret

0000096e <_ZN5tfthw4lineEjjjjj>:
		}
}

void tfthw::line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, \
		uint16_t c)
{
     96e:	4f 92       	push	r4
     970:	5f 92       	push	r5
     972:	6f 92       	push	r6
     974:	7f 92       	push	r7
     976:	8f 92       	push	r8
     978:	9f 92       	push	r9
     97a:	af 92       	push	r10
     97c:	bf 92       	push	r11
     97e:	cf 92       	push	r12
     980:	df 92       	push	r13
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	4c 01       	movw	r8, r24
     990:	6b 01       	movw	r12, r22
     992:	ea 01       	movw	r28, r20
     994:	59 01       	movw	r10, r18
	if (x0 == x1) {
     996:	62 17       	cp	r22, r18
     998:	73 07       	cpc	r23, r19
     99a:	a1 f4       	brne	.+40     	; 0x9c4 <_ZN5tfthw4lineEjjjjj+0x56>
		if (y0 > y1)
     99c:	04 17       	cp	r16, r20
     99e:	15 07       	cpc	r17, r21
     9a0:	30 f4       	brcc	.+12     	; 0x9ae <_ZN5tfthw4lineEjjjjj+0x40>
			SWAP(y0, y1);
     9a2:	c0 27       	eor	r28, r16
     9a4:	d1 27       	eor	r29, r17
     9a6:	0c 27       	eor	r16, r28
     9a8:	1d 27       	eor	r17, r29
     9aa:	c0 27       	eor	r28, r16
     9ac:	d1 27       	eor	r29, r17
		rectangle(x0, y0, 1, y1 - y0, c);
     9ae:	d4 01       	movw	r26, r8
     9b0:	ed 91       	ld	r30, X+
     9b2:	fc 91       	ld	r31, X
     9b4:	0c 1b       	sub	r16, r28
     9b6:	1d 0b       	sbc	r17, r29
     9b8:	04 a4       	ldd	r0, Z+44	; 0x2c
     9ba:	f5 a5       	ldd	r31, Z+45	; 0x2d
     9bc:	e0 2d       	mov	r30, r0
     9be:	21 e0       	ldi	r18, 0x01	; 1
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	17 c0       	rjmp	.+46     	; 0x9f2 <_ZN5tfthw4lineEjjjjj+0x84>
		return;
	}
	if (y0 == y1) {
     9c4:	40 17       	cp	r20, r16
     9c6:	51 07       	cpc	r21, r17
     9c8:	c9 f4       	brne	.+50     	; 0x9fc <_ZN5tfthw4lineEjjjjj+0x8e>
		if (x0 > x1)
     9ca:	26 17       	cp	r18, r22
     9cc:	37 07       	cpc	r19, r23
     9ce:	30 f4       	brcc	.+12     	; 0x9dc <_ZN5tfthw4lineEjjjjj+0x6e>
			SWAP(x0, x1);
     9d0:	c2 26       	eor	r12, r18
     9d2:	d3 26       	eor	r13, r19
     9d4:	ac 24       	eor	r10, r12
     9d6:	bd 24       	eor	r11, r13
     9d8:	ca 24       	eor	r12, r10
     9da:	db 24       	eor	r13, r11
		rectangle(x0, y0, x1 - x0, 1, c);
     9dc:	d4 01       	movw	r26, r8
     9de:	ed 91       	ld	r30, X+
     9e0:	fc 91       	ld	r31, X
     9e2:	95 01       	movw	r18, r10
     9e4:	2c 19       	sub	r18, r12
     9e6:	3d 09       	sbc	r19, r13
     9e8:	04 a4       	ldd	r0, Z+44	; 0x2c
     9ea:	f5 a5       	ldd	r31, Z+45	; 0x2d
     9ec:	e0 2d       	mov	r30, r0
     9ee:	01 e0       	ldi	r16, 0x01	; 1
     9f0:	10 e0       	ldi	r17, 0x00	; 0
     9f2:	ae 01       	movw	r20, r28
     9f4:	b6 01       	movw	r22, r12
     9f6:	c4 01       	movw	r24, r8
     9f8:	09 95       	icall
		return;
     9fa:	36 c0       	rjmp	.+108    	; 0xa68 <_ZN5tfthw4lineEjjjjj+0xfa>
	}
	if (y1 - y0 > x1 - x0)
     9fc:	28 01       	movw	r4, r16
     9fe:	44 1a       	sub	r4, r20
     a00:	55 0a       	sbc	r5, r21
     a02:	39 01       	movw	r6, r18
     a04:	66 1a       	sub	r6, r22
     a06:	77 0a       	sbc	r7, r23
     a08:	64 14       	cp	r6, r4
     a0a:	75 04       	cpc	r7, r5
     a0c:	50 f5       	brcc	.+84     	; 0xa62 <_ZN5tfthw4lineEjjjjj+0xf4>
     a0e:	11 c0       	rjmp	.+34     	; 0xa32 <_ZN5tfthw4lineEjjjjj+0xc4>
		for (uint16_t y = y0; y <= y1; y++)
			point(x0 + (x1 - x0) / (y1 - y0), y, c);
     a10:	d4 01       	movw	r26, r8
     a12:	ed 91       	ld	r30, X+
     a14:	fc 91       	ld	r31, X
     a16:	c3 01       	movw	r24, r6
     a18:	b2 01       	movw	r22, r4
     a1a:	0e 94 82 0b 	call	0x1704	; 0x1704 <__udivmodhi4>
     a1e:	6c 0d       	add	r22, r12
     a20:	7d 1d       	adc	r23, r13
     a22:	06 a4       	ldd	r0, Z+46	; 0x2e
     a24:	f7 a5       	ldd	r31, Z+47	; 0x2f
     a26:	e0 2d       	mov	r30, r0
     a28:	97 01       	movw	r18, r14
     a2a:	ae 01       	movw	r20, r28
     a2c:	c4 01       	movw	r24, r8
     a2e:	09 95       	icall
			SWAP(x0, x1);
		rectangle(x0, y0, x1 - x0, 1, c);
		return;
	}
	if (y1 - y0 > x1 - x0)
		for (uint16_t y = y0; y <= y1; y++)
     a30:	21 96       	adiw	r28, 0x01	; 1
     a32:	0c 17       	cp	r16, r28
     a34:	1d 07       	cpc	r17, r29
     a36:	60 f7       	brcc	.-40     	; 0xa10 <_ZN5tfthw4lineEjjjjj+0xa2>
     a38:	17 c0       	rjmp	.+46     	; 0xa68 <_ZN5tfthw4lineEjjjjj+0xfa>
			point(x0 + (x1 - x0) / (y1 - y0), y, c);
	else
		for (uint16_t x = x0; x <= x1; x++)
			point(x, y0 + (y1 - y0) / (x1 - x0), c);
     a3a:	d4 01       	movw	r26, r8
     a3c:	ed 91       	ld	r30, X+
     a3e:	fc 91       	ld	r31, X
     a40:	c2 01       	movw	r24, r4
     a42:	b3 01       	movw	r22, r6
     a44:	0e 94 82 0b 	call	0x1704	; 0x1704 <__udivmodhi4>
     a48:	ab 01       	movw	r20, r22
     a4a:	4c 0f       	add	r20, r28
     a4c:	5d 1f       	adc	r21, r29
     a4e:	06 a4       	ldd	r0, Z+46	; 0x2e
     a50:	f7 a5       	ldd	r31, Z+47	; 0x2f
     a52:	e0 2d       	mov	r30, r0
     a54:	97 01       	movw	r18, r14
     a56:	b6 01       	movw	r22, r12
     a58:	c4 01       	movw	r24, r8
     a5a:	09 95       	icall
	}
	if (y1 - y0 > x1 - x0)
		for (uint16_t y = y0; y <= y1; y++)
			point(x0 + (x1 - x0) / (y1 - y0), y, c);
	else
		for (uint16_t x = x0; x <= x1; x++)
     a5c:	bf ef       	ldi	r27, 0xFF	; 255
     a5e:	cb 1a       	sub	r12, r27
     a60:	db 0a       	sbc	r13, r27
     a62:	ac 14       	cp	r10, r12
     a64:	bd 04       	cpc	r11, r13
     a66:	48 f7       	brcc	.-46     	; 0xa3a <_ZN5tfthw4lineEjjjjj+0xcc>
			point(x, y0 + (y1 - y0) / (x1 - x0), c);
}
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	1f 91       	pop	r17
     a6e:	0f 91       	pop	r16
     a70:	ff 90       	pop	r15
     a72:	ef 90       	pop	r14
     a74:	df 90       	pop	r13
     a76:	cf 90       	pop	r12
     a78:	bf 90       	pop	r11
     a7a:	af 90       	pop	r10
     a7c:	9f 90       	pop	r9
     a7e:	8f 90       	pop	r8
     a80:	7f 90       	pop	r7
     a82:	6f 90       	pop	r6
     a84:	5f 90       	pop	r5
     a86:	4f 90       	pop	r4
     a88:	08 95       	ret

00000a8a <_ZN5tfthw4putsEjjPcjj>:
	}
}

void tfthw::puts(uint16_t x, uint16_t y, char *str, \
		uint16_t fgc, uint16_t bgc)
{
     a8a:	4f 92       	push	r4
     a8c:	5f 92       	push	r5
     a8e:	6f 92       	push	r6
     a90:	7f 92       	push	r7
     a92:	8f 92       	push	r8
     a94:	9f 92       	push	r9
     a96:	af 92       	push	r10
     a98:	bf 92       	push	r11
     a9a:	cf 92       	push	r12
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	6c 01       	movw	r12, r24
     aac:	eb 01       	movw	r28, r22
     aae:	5a 01       	movw	r10, r20
     ab0:	48 01       	movw	r8, r16
     ab2:	37 01       	movw	r6, r14
     ab4:	29 01       	movw	r4, r18
	while (*str != '\0') {
     ab6:	0d c0       	rjmp	.+26     	; 0xad2 <_ZN5tfthw4putsEjjPcjj+0x48>
		putch(x, y, *str++, fgc, bgc);
     ab8:	d6 01       	movw	r26, r12
     aba:	ed 91       	ld	r30, X+
     abc:	fc 91       	ld	r31, X
     abe:	00 a0       	ldd	r0, Z+32	; 0x20
     ac0:	f1 a1       	ldd	r31, Z+33	; 0x21
     ac2:	e0 2d       	mov	r30, r0
     ac4:	73 01       	movw	r14, r6
     ac6:	84 01       	movw	r16, r8
     ac8:	a5 01       	movw	r20, r10
     aca:	be 01       	movw	r22, r28
     acc:	c6 01       	movw	r24, r12
     ace:	09 95       	icall
		x += WIDTH;
     ad0:	26 96       	adiw	r28, 0x06	; 6
}

void tfthw::puts(uint16_t x, uint16_t y, char *str, \
		uint16_t fgc, uint16_t bgc)
{
	while (*str != '\0') {
     ad2:	f2 01       	movw	r30, r4
     ad4:	21 91       	ld	r18, Z+
     ad6:	2f 01       	movw	r4, r30
     ad8:	21 11       	cpse	r18, r1
     ada:	ee cf       	rjmp	.-36     	; 0xab8 <_ZN5tfthw4putsEjjPcjj+0x2e>
		putch(x, y, *str++, fgc, bgc);
		x += WIDTH;
	}
}
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	bf 90       	pop	r11
     aee:	af 90       	pop	r10
     af0:	9f 90       	pop	r9
     af2:	8f 90       	pop	r8
     af4:	7f 90       	pop	r7
     af6:	6f 90       	pop	r6
     af8:	5f 90       	pop	r5
     afa:	4f 90       	pop	r4
     afc:	08 95       	ret

00000afe <_ZN5tfthw7putbigsEjjhPcjj>:

void tfthw::putbigs(uint16_t x, uint16_t y, uint8_t z, char *str, \
		uint16_t fgc, uint16_t bgc)
{
     afe:	2f 92       	push	r2
     b00:	3f 92       	push	r3
     b02:	4f 92       	push	r4
     b04:	5f 92       	push	r5
     b06:	6f 92       	push	r6
     b08:	7f 92       	push	r7
     b0a:	8f 92       	push	r8
     b0c:	9f 92       	push	r9
     b0e:	af 92       	push	r10
     b10:	bf 92       	push	r11
     b12:	cf 92       	push	r12
     b14:	df 92       	push	r13
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	00 d0       	rcall	.+0      	; 0xb24 <_ZN5tfthw7putbigsEjjhPcjj+0x26>
     b24:	00 d0       	rcall	.+0      	; 0xb26 <_ZN5tfthw7putbigsEjjhPcjj+0x28>
     b26:	1f 92       	push	r1
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
     b2c:	5c 01       	movw	r10, r24
     b2e:	7d 83       	std	Y+5, r23	; 0x05
     b30:	6c 83       	std	Y+4, r22	; 0x04
     b32:	4a 01       	movw	r8, r20
     b34:	32 2f       	mov	r19, r18
     b36:	37 01       	movw	r6, r14
     b38:	26 01       	movw	r4, r12
	while (*str != '\0') {
		putbigch(x, y, z, *str++, fgc, bgc);
		x += WIDTH * z;
     b3a:	86 e0       	ldi	r24, 0x06	; 6
     b3c:	28 9f       	mul	r18, r24
     b3e:	a0 01       	movw	r20, r0
     b40:	11 24       	eor	r1, r1
     b42:	5a 83       	std	Y+2, r21	; 0x02
     b44:	49 83       	std	Y+1, r20	; 0x01
     b46:	18 01       	movw	r2, r16
}

void tfthw::putbigs(uint16_t x, uint16_t y, uint8_t z, char *str, \
		uint16_t fgc, uint16_t bgc)
{
	while (*str != '\0') {
     b48:	18 c0       	rjmp	.+48     	; 0xb7a <_ZN5tfthw7putbigsEjjhPcjj+0x7c>
		putbigch(x, y, z, *str++, fgc, bgc);
     b4a:	d5 01       	movw	r26, r10
     b4c:	ed 91       	ld	r30, X+
     b4e:	fc 91       	ld	r31, X
     b50:	02 a0       	ldd	r0, Z+34	; 0x22
     b52:	f3 a1       	ldd	r31, Z+35	; 0x23
     b54:	e0 2d       	mov	r30, r0
     b56:	62 01       	movw	r12, r4
     b58:	73 01       	movw	r14, r6
     b5a:	23 2f       	mov	r18, r19
     b5c:	a4 01       	movw	r20, r8
     b5e:	6c 81       	ldd	r22, Y+4	; 0x04
     b60:	7d 81       	ldd	r23, Y+5	; 0x05
     b62:	c5 01       	movw	r24, r10
     b64:	3b 83       	std	Y+3, r19	; 0x03
     b66:	09 95       	icall
		x += WIDTH * z;
     b68:	ec 81       	ldd	r30, Y+4	; 0x04
     b6a:	fd 81       	ldd	r31, Y+5	; 0x05
     b6c:	49 81       	ldd	r20, Y+1	; 0x01
     b6e:	5a 81       	ldd	r21, Y+2	; 0x02
     b70:	e4 0f       	add	r30, r20
     b72:	f5 1f       	adc	r31, r21
     b74:	fd 83       	std	Y+5, r31	; 0x05
     b76:	ec 83       	std	Y+4, r30	; 0x04
     b78:	3b 81       	ldd	r19, Y+3	; 0x03
}

void tfthw::putbigs(uint16_t x, uint16_t y, uint8_t z, char *str, \
		uint16_t fgc, uint16_t bgc)
{
	while (*str != '\0') {
     b7a:	d1 01       	movw	r26, r2
     b7c:	0d 91       	ld	r16, X+
     b7e:	1d 01       	movw	r2, r26
     b80:	01 11       	cpse	r16, r1
     b82:	e3 cf       	rjmp	.-58     	; 0xb4a <_ZN5tfthw7putbigsEjjhPcjj+0x4c>
		putbigch(x, y, z, *str++, fgc, bgc);
		x += WIDTH * z;
	}
}
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	af 90       	pop	r10
     ba2:	9f 90       	pop	r9
     ba4:	8f 90       	pop	r8
     ba6:	7f 90       	pop	r7
     ba8:	6f 90       	pop	r6
     baa:	5f 90       	pop	r5
     bac:	4f 90       	pop	r4
     bae:	3f 90       	pop	r3
     bb0:	2f 90       	pop	r2
     bb2:	08 95       	ret

00000bb4 <_ZN5tfthw8putbigchEjjhcjj>:
	}
}

void tfthw::putbigch(uint16_t x, uint16_t y, uint8_t z, char ch, \
		uint16_t fgc, uint16_t bgc)
{
     bb4:	4f 92       	push	r4
     bb6:	5f 92       	push	r5
     bb8:	6f 92       	push	r6
     bba:	7f 92       	push	r7
     bbc:	8f 92       	push	r8
     bbe:	9f 92       	push	r9
     bc0:	af 92       	push	r10
     bc2:	bf 92       	push	r11
     bc4:	cf 92       	push	r12
     bc6:	df 92       	push	r13
     bc8:	ef 92       	push	r14
     bca:	ff 92       	push	r15
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	b2 2e       	mov	r11, r18
     bd6:	a0 2e       	mov	r10, r16
     bd8:	37 01       	movw	r6, r14
     bda:	46 01       	movw	r8, r12
	unsigned char c;
	uint8_t i, j;
	area(x, y, WIDTH * z, HEIGHT * z);
     bdc:	c2 2e       	mov	r12, r18
     bde:	d1 2c       	mov	r13, r1
     be0:	e6 01       	movw	r28, r12
     be2:	e3 e0       	ldi	r30, 0x03	; 3
     be4:	cc 0f       	add	r28, r28
     be6:	dd 1f       	adc	r29, r29
     be8:	ea 95       	dec	r30
     bea:	e1 f7       	brne	.-8      	; 0xbe4 <_ZN5tfthw8putbigchEjjhcjj+0x30>
     bec:	26 e0       	ldi	r18, 0x06	; 6
     bee:	b2 9e       	mul	r11, r18
     bf0:	70 01       	movw	r14, r0
     bf2:	11 24       	eor	r1, r1
     bf4:	dc 01       	movw	r26, r24
     bf6:	ed 91       	ld	r30, X+
     bf8:	fc 91       	ld	r31, X
     bfa:	00 a8       	ldd	r0, Z+48	; 0x30
     bfc:	f1 a9       	ldd	r31, Z+49	; 0x31
     bfe:	e0 2d       	mov	r30, r0
     c00:	8e 01       	movw	r16, r28
     c02:	97 01       	movw	r18, r14
     c04:	09 95       	icall
	send(1, 0x2C);			// Memory Write
     c06:	6c e2       	ldi	r22, 0x2C	; 44
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	for (i = 0; i < HEIGHT * z; i++) {
     c0e:	51 2c       	mov	r5, r1
		c = pgm_read_byte(&(ascii[ch - ' '][i / z]));
     c10:	0a 2d       	mov	r16, r10
     c12:	11 27       	eor	r17, r17
     c14:	07 fd       	sbrc	r16, 7
     c16:	10 95       	com	r17
     c18:	00 52       	subi	r16, 0x20	; 32
     c1a:	11 09       	sbc	r17, r1
     c1c:	f3 e0       	ldi	r31, 0x03	; 3
     c1e:	00 0f       	add	r16, r16
     c20:	11 1f       	adc	r17, r17
     c22:	fa 95       	dec	r31
     c24:	e1 f7       	brne	.-8      	; 0xc1e <_ZN5tfthw8putbigchEjjhcjj+0x6a>
				send(0, fgc % 0x0100);
			} else {
				send(0, bgc / 0x0100);
				send(0, bgc % 0x0100);
			}
			if (j % z == z - 1)
     c26:	b1 e0       	ldi	r27, 0x01	; 1
     c28:	cb 1a       	sub	r12, r27
     c2a:	d1 08       	sbc	r13, r1
{
	unsigned char c;
	uint8_t i, j;
	area(x, y, WIDTH * z, HEIGHT * z);
	send(1, 0x2C);			// Memory Write
	for (i = 0; i < HEIGHT * z; i++) {
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <_ZN5tfthw8putbigchEjjhcjj+0xd4>
		c = pgm_read_byte(&(ascii[ch - ' '][i / z]));
     c2e:	85 2d       	mov	r24, r5
     c30:	6b 2d       	mov	r22, r11
     c32:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__udivmodqi4>
     c36:	f8 01       	movw	r30, r16
     c38:	e8 0f       	add	r30, r24
     c3a:	f1 1d       	adc	r31, r1
     c3c:	e4 58       	subi	r30, 0x84	; 132
     c3e:	ff 4f       	sbci	r31, 0xFF	; 255
     c40:	44 90       	lpm	r4, Z+
		for (j = 0; j < WIDTH * z; j++) {
     c42:	a1 2c       	mov	r10, r1
     c44:	1b c0       	rjmp	.+54     	; 0xc7c <_ZN5tfthw8putbigchEjjhcjj+0xc8>
			if (c & 0x80) {
     c46:	47 fe       	sbrs	r4, 7
     c48:	06 c0       	rjmp	.+12     	; 0xc56 <_ZN5tfthw8putbigchEjjhcjj+0xa2>
				send(0, fgc / 0x0100);
     c4a:	67 2d       	mov	r22, r7
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
				send(0, fgc % 0x0100);
     c52:	66 2d       	mov	r22, r6
     c54:	05 c0       	rjmp	.+10     	; 0xc60 <_ZN5tfthw8putbigchEjjhcjj+0xac>
			} else {
				send(0, bgc / 0x0100);
     c56:	69 2d       	mov	r22, r9
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
				send(0, bgc % 0x0100);
     c5e:	68 2d       	mov	r22, r8
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
			}
			if (j % z == z - 1)
     c66:	8a 2d       	mov	r24, r10
     c68:	6b 2d       	mov	r22, r11
     c6a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__udivmodqi4>
     c6e:	29 2f       	mov	r18, r25
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	2c 15       	cp	r18, r12
     c74:	3d 05       	cpc	r19, r13
     c76:	09 f4       	brne	.+2      	; 0xc7a <_ZN5tfthw8putbigchEjjhcjj+0xc6>
				c <<= 1;
     c78:	44 0c       	add	r4, r4
	uint8_t i, j;
	area(x, y, WIDTH * z, HEIGHT * z);
	send(1, 0x2C);			// Memory Write
	for (i = 0; i < HEIGHT * z; i++) {
		c = pgm_read_byte(&(ascii[ch - ' '][i / z]));
		for (j = 0; j < WIDTH * z; j++) {
     c7a:	a3 94       	inc	r10
     c7c:	2a 2d       	mov	r18, r10
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	2e 15       	cp	r18, r14
     c82:	3f 05       	cpc	r19, r15
     c84:	04 f3       	brlt	.-64     	; 0xc46 <_ZN5tfthw8putbigchEjjhcjj+0x92>
{
	unsigned char c;
	uint8_t i, j;
	area(x, y, WIDTH * z, HEIGHT * z);
	send(1, 0x2C);			// Memory Write
	for (i = 0; i < HEIGHT * z; i++) {
     c86:	53 94       	inc	r5
     c88:	25 2d       	mov	r18, r5
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	2c 17       	cp	r18, r28
     c8e:	3d 07       	cpc	r19, r29
     c90:	74 f2       	brlt	.-100    	; 0xc2e <_ZN5tfthw8putbigchEjjhcjj+0x7a>
			}
			if (j % z == z - 1)
				c <<= 1;
		}
	}
}
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	df 90       	pop	r13
     ca0:	cf 90       	pop	r12
     ca2:	bf 90       	pop	r11
     ca4:	af 90       	pop	r10
     ca6:	9f 90       	pop	r9
     ca8:	8f 90       	pop	r8
     caa:	7f 90       	pop	r7
     cac:	6f 90       	pop	r6
     cae:	5f 90       	pop	r5
     cb0:	4f 90       	pop	r4
     cb2:	08 95       	ret

00000cb4 <_ZN5tfthw5putchEjjcjj>:
		}
}

void tfthw::putch(uint16_t x, uint16_t y, char ch, \
		uint16_t fgc, uint16_t bgc)
{
     cb4:	af 92       	push	r10
     cb6:	bf 92       	push	r11
     cb8:	cf 92       	push	r12
     cba:	df 92       	push	r13
     cbc:	ef 92       	push	r14
     cbe:	ff 92       	push	r15
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	c2 2f       	mov	r28, r18
     cca:	b0 2e       	mov	r11, r16
     ccc:	a1 2e       	mov	r10, r17
	unsigned char c;
	uint8_t i, j;
	area(x, y, WIDTH, HEIGHT);
     cce:	dc 01       	movw	r26, r24
     cd0:	ed 91       	ld	r30, X+
     cd2:	fc 91       	ld	r31, X
     cd4:	00 a8       	ldd	r0, Z+48	; 0x30
     cd6:	f1 a9       	ldd	r31, Z+49	; 0x31
     cd8:	e0 2d       	mov	r30, r0
     cda:	08 e0       	ldi	r16, 0x08	; 8
     cdc:	10 e0       	ldi	r17, 0x00	; 0
     cde:	26 e0       	ldi	r18, 0x06	; 6
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	09 95       	icall
	send(1, 0x2C);			// Memory Write
     ce4:	6c e2       	ldi	r22, 0x2C	; 44
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
		for (j = 0; j < WIDTH; j++) {
			if (c & 0x80) {
				send(0, fgc / 0x0100);
				send(0, fgc % 0x0100);
			} else {
				send(0, bgc / 0x0100);
     cec:	c1 2c       	mov	r12, r1
     cee:	d1 2c       	mov	r13, r1
	unsigned char c;
	uint8_t i, j;
	area(x, y, WIDTH, HEIGHT);
	send(1, 0x2C);			// Memory Write
	for (i = 0; i < HEIGHT; i++) {
		c = pgm_read_byte(&(ascii[ch - ' '][i]));
     cf0:	dd 27       	eor	r29, r29
     cf2:	c7 fd       	sbrc	r28, 7
     cf4:	d0 95       	com	r29
     cf6:	a0 97       	sbiw	r28, 0x20	; 32
     cf8:	a3 e0       	ldi	r26, 0x03	; 3
     cfa:	cc 0f       	add	r28, r28
     cfc:	dd 1f       	adc	r29, r29
     cfe:	aa 95       	dec	r26
     d00:	e1 f7       	brne	.-8      	; 0xcfa <_ZN5tfthw5putchEjjcjj+0x46>
     d02:	f6 01       	movw	r30, r12
     d04:	ec 0f       	add	r30, r28
     d06:	fd 1f       	adc	r31, r29
     d08:	e4 58       	subi	r30, 0x84	; 132
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	04 91       	lpm	r16, Z+
     d0e:	16 e0       	ldi	r17, 0x06	; 6
		for (j = 0; j < WIDTH; j++) {
			if (c & 0x80) {
     d10:	07 ff       	sbrs	r16, 7
     d12:	06 c0       	rjmp	.+12     	; 0xd20 <_ZN5tfthw5putchEjjcjj+0x6c>
				send(0, fgc / 0x0100);
     d14:	6a 2d       	mov	r22, r10
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
				send(0, fgc % 0x0100);
     d1c:	6b 2d       	mov	r22, r11
     d1e:	05 c0       	rjmp	.+10     	; 0xd2a <_ZN5tfthw5putchEjjcjj+0x76>
			} else {
				send(0, bgc / 0x0100);
     d20:	6f 2d       	mov	r22, r15
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
				send(0, bgc % 0x0100);
     d28:	6e 2d       	mov	r22, r14
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
			}
			c <<= 1;
     d30:	00 0f       	add	r16, r16
     d32:	11 50       	subi	r17, 0x01	; 1
	uint8_t i, j;
	area(x, y, WIDTH, HEIGHT);
	send(1, 0x2C);			// Memory Write
	for (i = 0; i < HEIGHT; i++) {
		c = pgm_read_byte(&(ascii[ch - ' '][i]));
		for (j = 0; j < WIDTH; j++) {
     d34:	69 f7       	brne	.-38     	; 0xd10 <_ZN5tfthw5putchEjjcjj+0x5c>
     d36:	bf ef       	ldi	r27, 0xFF	; 255
     d38:	cb 1a       	sub	r12, r27
     d3a:	db 0a       	sbc	r13, r27
{
	unsigned char c;
	uint8_t i, j;
	area(x, y, WIDTH, HEIGHT);
	send(1, 0x2C);			// Memory Write
	for (i = 0; i < HEIGHT; i++) {
     d3c:	88 e0       	ldi	r24, 0x08	; 8
     d3e:	c8 16       	cp	r12, r24
     d40:	d1 04       	cpc	r13, r1
     d42:	f9 f6       	brne	.-66     	; 0xd02 <_ZN5tfthw5putchEjjcjj+0x4e>
				send(0, bgc % 0x0100);
			}
			c <<= 1;
		}
	}
}
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	ff 90       	pop	r15
     d4e:	ef 90       	pop	r14
     d50:	df 90       	pop	r13
     d52:	cf 90       	pop	r12
     d54:	bf 90       	pop	r11
     d56:	af 90       	pop	r10
     d58:	08 95       	ret

00000d5a <_ZN5tfthw9rectangleEjjjjj>:
	send(0, (y + h - 1) % 0x0100);
}

void tfthw::rectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, \
		uint16_t c)
{
     d5a:	af 92       	push	r10
     d5c:	bf 92       	push	r11
     d5e:	cf 92       	push	r12
     d60:	df 92       	push	r13
     d62:	ef 92       	push	r14
     d64:	ff 92       	push	r15
     d66:	0f 93       	push	r16
     d68:	1f 93       	push	r17
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	e9 01       	movw	r28, r18
     d70:	58 01       	movw	r10, r16
	area(x, y, w, h);
     d72:	dc 01       	movw	r26, r24
     d74:	ed 91       	ld	r30, X+
     d76:	fc 91       	ld	r31, X
     d78:	00 a8       	ldd	r0, Z+48	; 0x30
     d7a:	f1 a9       	ldd	r31, Z+49	; 0x31
     d7c:	e0 2d       	mov	r30, r0
     d7e:	09 95       	icall
	send(1, 0x2C);			// Memory Write
     d80:	6c e2       	ldi	r22, 0x2C	; 44
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	while (w--)
     d88:	12 c0       	rjmp	.+36     	; 0xdae <_ZN5tfthw9rectangleEjjjjj+0x54>
		for (y = 0; y < h; y++) {
			send(0, c / 0x0100);
     d8a:	6f 2d       	mov	r22, r15
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
			send(0, c % 0x0100);
     d92:	6e 2d       	mov	r22, r14
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
		uint16_t c)
{
	area(x, y, w, h);
	send(1, 0x2C);			// Memory Write
	while (w--)
		for (y = 0; y < h; y++) {
     d9a:	bf ef       	ldi	r27, 0xFF	; 255
     d9c:	cb 1a       	sub	r12, r27
     d9e:	db 0a       	sbc	r13, r27
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <_ZN5tfthw9rectangleEjjjjj+0x4c>
void tfthw::rectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, \
		uint16_t c)
{
	area(x, y, w, h);
	send(1, 0x2C);			// Memory Write
	while (w--)
     da2:	c1 2c       	mov	r12, r1
     da4:	d1 2c       	mov	r13, r1
		for (y = 0; y < h; y++) {
     da6:	ca 14       	cp	r12, r10
     da8:	db 04       	cpc	r13, r11
     daa:	79 f7       	brne	.-34     	; 0xd8a <_ZN5tfthw9rectangleEjjjjj+0x30>
     dac:	21 97       	sbiw	r28, 0x01	; 1
void tfthw::rectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, \
		uint16_t c)
{
	area(x, y, w, h);
	send(1, 0x2C);			// Memory Write
	while (w--)
     dae:	20 97       	sbiw	r28, 0x00	; 0
     db0:	c1 f7       	brne	.-16     	; 0xda2 <_ZN5tfthw9rectangleEjjjjj+0x48>
		for (y = 0; y < h; y++) {
			send(0, c / 0x0100);
			send(0, c % 0x0100);
		}
}
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	ff 90       	pop	r15
     dbc:	ef 90       	pop	r14
     dbe:	df 90       	pop	r13
     dc0:	cf 90       	pop	r12
     dc2:	bf 90       	pop	r11
     dc4:	af 90       	pop	r10
     dc6:	08 95       	ret

00000dc8 <_ZN5tfthw4areaEjjjj>:
	send(0, (h - 1) / 0x0100);	// h
	send(0, (h - 1) % 0x0100);
}

void tfthw::area(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
     dc8:	bf 92       	push	r11
     dca:	cf 92       	push	r12
     dcc:	df 92       	push	r13
     dce:	ef 92       	push	r14
     dd0:	ff 92       	push	r15
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	eb 01       	movw	r28, r22
     ddc:	7a 01       	movw	r14, r20
     dde:	69 01       	movw	r12, r18
	send(1, 0x2A);			// Column Address Set
     de0:	6a e2       	ldi	r22, 0x2A	; 42
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(0, x / 0x0100);
     de8:	6d 2f       	mov	r22, r29
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(0, x % 0x0100);
     df0:	bc 2e       	mov	r11, r28
     df2:	6c 2f       	mov	r22, r28
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(0, (x + w - 1) / 0x0100);
     dfa:	21 97       	sbiw	r28, 0x01	; 1
     dfc:	cc 0d       	add	r28, r12
     dfe:	dd 1d       	adc	r29, r13
     e00:	6d 2f       	mov	r22, r29
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(0, (x + w - 1) % 0x0100);
     e08:	6b 2d       	mov	r22, r11
     e0a:	61 50       	subi	r22, 0x01	; 1
     e0c:	6c 0d       	add	r22, r12
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(1, 0x2B);			// Page Address Set
     e14:	6b e2       	ldi	r22, 0x2B	; 43
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(0, y / 0x0100);
     e1c:	6f 2d       	mov	r22, r15
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(0, y % 0x0100);
     e24:	ce 2d       	mov	r28, r14
     e26:	6e 2d       	mov	r22, r14
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(0, (y + h - 1) / 0x0100);
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	e8 1a       	sub	r14, r24
     e32:	f1 08       	sbc	r15, r1
     e34:	e0 0e       	add	r14, r16
     e36:	f1 1e       	adc	r15, r17
     e38:	6f 2d       	mov	r22, r15
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(0, (y + h - 1) % 0x0100);
     e40:	6c 2f       	mov	r22, r28
     e42:	61 50       	subi	r22, 0x01	; 1
     e44:	60 0f       	add	r22, r16
     e46:	80 e0       	ldi	r24, 0x00	; 0
}
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	ff 90       	pop	r15
     e52:	ef 90       	pop	r14
     e54:	df 90       	pop	r13
     e56:	cf 90       	pop	r12
     e58:	bf 90       	pop	r11
	send(0, (x + w - 1) % 0x0100);
	send(1, 0x2B);			// Page Address Set
	send(0, y / 0x0100);
	send(0, y % 0x0100);
	send(0, (y + h - 1) / 0x0100);
	send(0, (y + h - 1) % 0x0100);
     e5a:	0c 94 0c 02 	jmp	0x418	; 0x418 <_ZN7ili93414sendEbh>

00000e5e <_ZN5tfthw3allEv>:
	send(0, c / 0x0100);
	send(0, c % 0x0100);
}

void tfthw::all()
{
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	ec 01       	movw	r28, r24
	send(1, 0x2A);			// Column Address Set
     e64:	6a e2       	ldi	r22, 0x2A	; 42
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(0, 0x00);			// x
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(0, 0x00);
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(0, (w - 1) / 0x0100);	// w
     e7c:	88 85       	ldd	r24, Y+8	; 0x08
     e7e:	99 85       	ldd	r25, Y+9	; 0x09
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	69 2f       	mov	r22, r25
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(0, (w - 1) % 0x0100);
     e8a:	68 85       	ldd	r22, Y+8	; 0x08
     e8c:	61 50       	subi	r22, 0x01	; 1
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(1, 0x2B);			// Page Address Set
     e94:	6b e2       	ldi	r22, 0x2B	; 43
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(0, 0x00);			// y
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(0, 0x00);
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(0, (h - 1) / 0x0100);	// h
     eac:	8a 85       	ldd	r24, Y+10	; 0x0a
     eae:	9b 85       	ldd	r25, Y+11	; 0x0b
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	69 2f       	mov	r22, r25
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(0, (h - 1) % 0x0100);
     eba:	6a 85       	ldd	r22, Y+10	; 0x0a
     ebc:	61 50       	subi	r22, 0x01	; 1
     ebe:	80 e0       	ldi	r24, 0x00	; 0
}
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
	send(0, (w - 1) % 0x0100);
	send(1, 0x2B);			// Page Address Set
	send(0, 0x00);			// y
	send(0, 0x00);
	send(0, (h - 1) / 0x0100);	// h
	send(0, (h - 1) % 0x0100);
     ec4:	0c 94 0c 02 	jmp	0x418	; 0x418 <_ZN7ili93414sendEbh>

00000ec8 <_ZN5tfthw5pointEjjj>:
		for (uint16_t x = x0; x <= x1; x++)
			point(x, y0 + (y1 - y0) / (x1 - x0), c);
}

void tfthw::point(uint16_t x, uint16_t y, uint16_t c)
{
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	e9 01       	movw	r28, r18
	area(x, y, 1, 1);
     ed2:	dc 01       	movw	r26, r24
     ed4:	ed 91       	ld	r30, X+
     ed6:	fc 91       	ld	r31, X
     ed8:	00 a8       	ldd	r0, Z+48	; 0x30
     eda:	f1 a9       	ldd	r31, Z+49	; 0x31
     edc:	e0 2d       	mov	r30, r0
     ede:	01 e0       	ldi	r16, 0x01	; 1
     ee0:	10 e0       	ldi	r17, 0x00	; 0
     ee2:	21 e0       	ldi	r18, 0x01	; 1
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	09 95       	icall
	send(1, 0x2C);			// Memory Write
     ee8:	6c e2       	ldi	r22, 0x2C	; 44
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(0, c / 0x0100);
     ef0:	6d 2f       	mov	r22, r29
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	send(0, c % 0x0100);
     ef8:	6c 2f       	mov	r22, r28
     efa:	80 e0       	ldi	r24, 0x00	; 0
}
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
void tfthw::point(uint16_t x, uint16_t y, uint16_t c)
{
	area(x, y, 1, 1);
	send(1, 0x2C);			// Memory Write
	send(0, c / 0x0100);
	send(0, c % 0x0100);
     f04:	0c 94 0c 02 	jmp	0x418	; 0x418 <_ZN7ili93414sendEbh>

00000f08 <_ZN5tfthw4fillEj>:
	rectangle(x, y + s, s, h - s, c);
	rectangle(x + s, y + h - s, w - s, s, c);
}

void tfthw::fill(uint16_t clr)
{
     f08:	cf 92       	push	r12
     f0a:	df 92       	push	r13
     f0c:	ef 92       	push	r14
     f0e:	ff 92       	push	r15
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	ec 01       	movw	r28, r24
     f1a:	d6 2e       	mov	r13, r22
     f1c:	c7 2e       	mov	r12, r23
	uint16_t x, y;
	all();
     f1e:	e8 81       	ld	r30, Y
     f20:	f9 81       	ldd	r31, Y+1	; 0x01
     f22:	02 a8       	ldd	r0, Z+50	; 0x32
     f24:	f3 a9       	ldd	r31, Z+51	; 0x33
     f26:	e0 2d       	mov	r30, r0
     f28:	09 95       	icall
	send(1, 0x2C);			// Memory Write
     f2a:	6c e2       	ldi	r22, 0x2C	; 44
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
	for (x = 0; x < w; x++)
     f32:	00 e0       	ldi	r16, 0x00	; 0
     f34:	10 e0       	ldi	r17, 0x00	; 0
     f36:	15 c0       	rjmp	.+42     	; 0xf62 <_ZN5tfthw4fillEj+0x5a>
		for (y = 0; y < h; y++) {
			send(0, clr / 0x0100);
     f38:	6c 2d       	mov	r22, r12
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
			send(0, clr % 0x0100);
     f40:	6d 2d       	mov	r22, r13
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN7ili93414sendEbh>
{
	uint16_t x, y;
	all();
	send(1, 0x2C);			// Memory Write
	for (x = 0; x < w; x++)
		for (y = 0; y < h; y++) {
     f48:	8f ef       	ldi	r24, 0xFF	; 255
     f4a:	e8 1a       	sub	r14, r24
     f4c:	f8 0a       	sbc	r15, r24
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <_ZN5tfthw4fillEj+0x4c>
void tfthw::fill(uint16_t clr)
{
	uint16_t x, y;
	all();
	send(1, 0x2C);			// Memory Write
	for (x = 0; x < w; x++)
     f50:	e1 2c       	mov	r14, r1
     f52:	f1 2c       	mov	r15, r1
		for (y = 0; y < h; y++) {
     f54:	8a 85       	ldd	r24, Y+10	; 0x0a
     f56:	9b 85       	ldd	r25, Y+11	; 0x0b
     f58:	e8 16       	cp	r14, r24
     f5a:	f9 06       	cpc	r15, r25
     f5c:	68 f3       	brcs	.-38     	; 0xf38 <_ZN5tfthw4fillEj+0x30>
void tfthw::fill(uint16_t clr)
{
	uint16_t x, y;
	all();
	send(1, 0x2C);			// Memory Write
	for (x = 0; x < w; x++)
     f5e:	0f 5f       	subi	r16, 0xFF	; 255
     f60:	1f 4f       	sbci	r17, 0xFF	; 255
     f62:	88 85       	ldd	r24, Y+8	; 0x08
     f64:	99 85       	ldd	r25, Y+9	; 0x09
     f66:	08 17       	cp	r16, r24
     f68:	19 07       	cpc	r17, r25
     f6a:	90 f3       	brcs	.-28     	; 0xf50 <_ZN5tfthw4fillEj+0x48>
		for (y = 0; y < h; y++) {
			send(0, clr / 0x0100);
			send(0, clr % 0x0100);
		}
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	ff 90       	pop	r15
     f76:	ef 90       	pop	r14
     f78:	df 90       	pop	r13
     f7a:	cf 90       	pop	r12
     f7c:	08 95       	ret

00000f7e <_ZN5tfthw9setOrientEh>:
{
	_setBGLight(e);
}

void tfthw::setOrient(uint8_t o)
{
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	1f 92       	push	r1
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	8c 01       	movw	r16, r24
	_setOrient(o);
     f8e:	86 2f       	mov	r24, r22
     f90:	69 83       	std	Y+1, r22	; 0x01
     f92:	0e 94 89 02 	call	0x512	; 0x512 <_ZN7ili934110_setOrientEh>
	switch (o) {
     f96:	69 81       	ldd	r22, Y+1	; 0x01
     f98:	61 30       	cpi	r22, 0x01	; 1
     f9a:	71 f0       	breq	.+28     	; 0xfb8 <_ZN5tfthw9setOrientEh+0x3a>
     f9c:	28 f0       	brcs	.+10     	; 0xfa8 <_ZN5tfthw9setOrientEh+0x2a>
     f9e:	62 30       	cpi	r22, 0x02	; 2
     fa0:	19 f0       	breq	.+6      	; 0xfa8 <_ZN5tfthw9setOrientEh+0x2a>
     fa2:	63 30       	cpi	r22, 0x03	; 3
     fa4:	91 f4       	brne	.+36     	; 0xfca <_ZN5tfthw9setOrientEh+0x4c>
     fa6:	08 c0       	rjmp	.+16     	; 0xfb8 <_ZN5tfthw9setOrientEh+0x3a>
	case Landscape:
	case FlipLandscape:
		w = SIZE_H;
     fa8:	20 e4       	ldi	r18, 0x40	; 64
     faa:	31 e0       	ldi	r19, 0x01	; 1
     fac:	f8 01       	movw	r30, r16
     fae:	31 87       	std	Z+9, r19	; 0x09
     fb0:	20 87       	std	Z+8, r18	; 0x08
		h = SIZE_W;
     fb2:	20 ef       	ldi	r18, 0xF0	; 240
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	07 c0       	rjmp	.+14     	; 0xfc6 <_ZN5tfthw9setOrientEh+0x48>
		break;
	case Portrait:
	case FlipPortrait:
		w = SIZE_W;
     fb8:	20 ef       	ldi	r18, 0xF0	; 240
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	f8 01       	movw	r30, r16
     fbe:	31 87       	std	Z+9, r19	; 0x09
     fc0:	20 87       	std	Z+8, r18	; 0x08
		h = SIZE_H;
     fc2:	20 e4       	ldi	r18, 0x40	; 64
     fc4:	31 e0       	ldi	r19, 0x01	; 1
     fc6:	33 87       	std	Z+11, r19	; 0x0b
     fc8:	22 87       	std	Z+10, r18	; 0x0a
	}
	orient = o;
     fca:	f8 01       	movw	r30, r16
     fcc:	63 83       	std	Z+3, r22	; 0x03
}
     fce:	0f 90       	pop	r0
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	08 95       	ret

00000fda <_ZN5tfthw10setBGLightEb>:
	if (x + WIDTH * zoom > w)
		newline();
}

void tfthw::setBGLight(bool e)
{
     fda:	86 2f       	mov	r24, r22
	_setBGLight(e);
     fdc:	0c 94 ae 02 	jmp	0x55c	; 0x55c <_ZN7ili934111_setBGLightEb>

00000fe0 <_ZN5tfthw4nextEv>:
		out = fdevopen(tftputch, NULL);
	return out;
}

void tfthw::next(void)
{
     fe0:	dc 01       	movw	r26, r24
	x += WIDTH * zoom;
     fe2:	12 96       	adiw	r26, 0x02	; 2
     fe4:	2c 91       	ld	r18, X
     fe6:	12 97       	sbiw	r26, 0x02	; 2
     fe8:	86 e0       	ldi	r24, 0x06	; 6
     fea:	28 9f       	mul	r18, r24
     fec:	90 01       	movw	r18, r0
     fee:	11 24       	eor	r1, r1
     ff0:	14 96       	adiw	r26, 0x04	; 4
     ff2:	8d 91       	ld	r24, X+
     ff4:	9c 91       	ld	r25, X
     ff6:	15 97       	sbiw	r26, 0x05	; 5
     ff8:	82 0f       	add	r24, r18
     ffa:	93 1f       	adc	r25, r19
     ffc:	15 96       	adiw	r26, 0x05	; 5
     ffe:	9c 93       	st	X, r25
    1000:	8e 93       	st	-X, r24
    1002:	14 97       	sbiw	r26, 0x04	; 4
	if (x + WIDTH * zoom > w)
    1004:	82 0f       	add	r24, r18
    1006:	93 1f       	adc	r25, r19
    1008:	18 96       	adiw	r26, 0x08	; 8
    100a:	4d 91       	ld	r20, X+
    100c:	5c 91       	ld	r21, X
    100e:	19 97       	sbiw	r26, 0x09	; 9
    1010:	48 17       	cp	r20, r24
    1012:	59 07       	cpc	r21, r25
    1014:	40 f4       	brcc	.+16     	; 0x1026 <_ZN5tfthw4nextEv+0x46>
		newline();
    1016:	ed 91       	ld	r30, X+
    1018:	fc 91       	ld	r31, X
    101a:	11 97       	sbiw	r26, 0x01	; 1
    101c:	04 a8       	ldd	r0, Z+52	; 0x34
    101e:	f5 a9       	ldd	r31, Z+53	; 0x35
    1020:	e0 2d       	mov	r30, r0
    1022:	cd 01       	movw	r24, r26
    1024:	09 94       	ijmp
    1026:	08 95       	ret

00001028 <_ZN5tfthw7newlineEv>:
	}
	orient = o;
}

void tfthw::newline(void)
{
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	ec 01       	movw	r28, r24
	x = 0;
    102e:	1d 82       	std	Y+5, r1	; 0x05
    1030:	1c 82       	std	Y+4, r1	; 0x04
	y += HEIGHT * zoom;
    1032:	2a 81       	ldd	r18, Y+2	; 0x02
    1034:	88 e0       	ldi	r24, 0x08	; 8
    1036:	28 9f       	mul	r18, r24
    1038:	90 01       	movw	r18, r0
    103a:	11 24       	eor	r1, r1
    103c:	8e 81       	ldd	r24, Y+6	; 0x06
    103e:	9f 81       	ldd	r25, Y+7	; 0x07
    1040:	82 0f       	add	r24, r18
    1042:	93 1f       	adc	r25, r19
    1044:	9f 83       	std	Y+7, r25	; 0x07
    1046:	8e 83       	std	Y+6, r24	; 0x06
	if (y + HEIGHT * zoom > h) {
    1048:	82 0f       	add	r24, r18
    104a:	93 1f       	adc	r25, r19
    104c:	4a 85       	ldd	r20, Y+10	; 0x0a
    104e:	5b 85       	ldd	r21, Y+11	; 0x0b
    1050:	48 17       	cp	r20, r24
    1052:	59 07       	cpc	r21, r25
    1054:	58 f4       	brcc	.+22     	; 0x106c <_ZN5tfthw7newlineEv+0x44>
		fill(bc);
    1056:	e8 81       	ld	r30, Y
    1058:	f9 81       	ldd	r31, Y+1	; 0x01
    105a:	6e 85       	ldd	r22, Y+14	; 0x0e
    105c:	7f 85       	ldd	r23, Y+15	; 0x0f
    105e:	06 8c       	ldd	r0, Z+30	; 0x1e
    1060:	f7 8d       	ldd	r31, Z+31	; 0x1f
    1062:	e0 2d       	mov	r30, r0
    1064:	ce 01       	movw	r24, r28
    1066:	09 95       	icall
		y = 0;
    1068:	1f 82       	std	Y+7, r1	; 0x07
    106a:	1e 82       	std	Y+6, r1	; 0x06
	}
}
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	08 95       	ret

00001072 <_ZN5tfthwC1Ev>:

#include <avr/pgmspace.h>

class tfthw tft;

tfthw::tfthw(void)
    1072:	fc 01       	movw	r30, r24
    1074:	81 ec       	ldi	r24, 0xC1	; 193
    1076:	91 e0       	ldi	r25, 0x01	; 1
    1078:	91 83       	std	Z+1, r25	; 0x01
    107a:	80 83       	st	Z, r24
{
	x = 0;
    107c:	15 82       	std	Z+5, r1	; 0x05
    107e:	14 82       	std	Z+4, r1	; 0x04
	y = 0;
    1080:	17 82       	std	Z+7, r1	; 0x07
    1082:	16 82       	std	Z+6, r1	; 0x06
	zoom = 1;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	82 83       	std	Z+2, r24	; 0x02
	orient = Portrait;
    1088:	83 83       	std	Z+3, r24	; 0x03
	w = SIZE_W;
    108a:	80 ef       	ldi	r24, 0xF0	; 240
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	91 87       	std	Z+9, r25	; 0x09
    1090:	80 87       	std	Z+8, r24	; 0x08
	h = SIZE_H;
    1092:	80 e4       	ldi	r24, 0x40	; 64
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	93 87       	std	Z+11, r25	; 0x0b
    1098:	82 87       	std	Z+10, r24	; 0x0a
	fc = DEF_FC;
    109a:	8f ef       	ldi	r24, 0xFF	; 255
    109c:	9f ef       	ldi	r25, 0xFF	; 255
    109e:	95 87       	std	Z+13, r25	; 0x0d
    10a0:	84 87       	std	Z+12, r24	; 0x0c
	bc = DEF_BC;
    10a2:	17 86       	std	Z+15, r1	; 0x0f
    10a4:	16 86       	std	Z+14, r1	; 0x0e
    10a6:	08 95       	ret

000010a8 <_ZN5tfthwdVEh>:
}

class tfthw& tfthw::operator/=(uint8_t o)
{
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	ec 01       	movw	r28, r24
	setOrient(o);
    10ae:	e8 81       	ld	r30, Y
    10b0:	f9 81       	ldd	r31, Y+1	; 0x01
    10b2:	02 88       	ldd	r0, Z+18	; 0x12
    10b4:	f3 89       	ldd	r31, Z+19	; 0x13
    10b6:	e0 2d       	mov	r30, r0
    10b8:	09 95       	icall
	return *this;
}
    10ba:	ce 01       	movw	r24, r28
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	08 95       	ret

000010c2 <_ZN5tfthwmLEh>:

class tfthw& tfthw::operator*=(uint8_t z)
{
    10c2:	fc 01       	movw	r30, r24
	zoom = z;
    10c4:	62 83       	std	Z+2, r22	; 0x02
	return *this;
}
    10c6:	08 95       	ret

000010c8 <_ZN5tfthwppEi>:

class tfthw& tfthw::operator++(int x)
{
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	1f 92       	push	r1
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	18 2f       	mov	r17, r24
	_setBGLight(true);
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	99 83       	std	Y+1, r25	; 0x01
    10da:	0e 94 ae 02 	call	0x55c	; 0x55c <_ZN7ili934111_setBGLightEb>
	return *this;
}
    10de:	81 2f       	mov	r24, r17
    10e0:	99 81       	ldd	r25, Y+1	; 0x01
    10e2:	0f 90       	pop	r0
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	08 95       	ret

000010ec <_ZN5tfthwmmEi>:

class tfthw& tfthw::operator--(int x)
{
    10ec:	1f 93       	push	r17
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	1f 92       	push	r1
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	18 2f       	mov	r17, r24
	_setBGLight(false);
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	99 83       	std	Y+1, r25	; 0x01
    10fe:	0e 94 ae 02 	call	0x55c	; 0x55c <_ZN7ili934111_setBGLightEb>
	return *this;
}
    1102:	81 2f       	mov	r24, r17
    1104:	99 81       	ldd	r25, Y+1	; 0x01
    1106:	0f 90       	pop	r0
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	1f 91       	pop	r17
    110e:	08 95       	ret

00001110 <_ZN5tfthwlsEc>:
	}
	return *this;
}

class tfthw& tfthw::operator<<(const char c)
{
    1110:	cf 92       	push	r12
    1112:	df 92       	push	r13
    1114:	ef 92       	push	r14
    1116:	ff 92       	push	r15
    1118:	0f 93       	push	r16
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	ec 01       	movw	r28, r24
    1120:	e8 81       	ld	r30, Y
    1122:	f9 81       	ldd	r31, Y+1	; 0x01
	if (c == '\n')
    1124:	6a 30       	cpi	r22, 0x0A	; 10
    1126:	21 f4       	brne	.+8      	; 0x1130 <_ZN5tfthwlsEc+0x20>
		newline();
    1128:	04 a8       	ldd	r0, Z+52	; 0x34
    112a:	f5 a9       	ldd	r31, Z+53	; 0x35
    112c:	e0 2d       	mov	r30, r0
    112e:	15 c0       	rjmp	.+42     	; 0x115a <_ZN5tfthwlsEc+0x4a>
	else {
		putbigch(x, y, zoom, c, fc, bc);
    1130:	ce 84       	ldd	r12, Y+14	; 0x0e
    1132:	df 84       	ldd	r13, Y+15	; 0x0f
    1134:	ec 84       	ldd	r14, Y+12	; 0x0c
    1136:	fd 84       	ldd	r15, Y+13	; 0x0d
    1138:	4e 81       	ldd	r20, Y+6	; 0x06
    113a:	5f 81       	ldd	r21, Y+7	; 0x07
    113c:	8c 81       	ldd	r24, Y+4	; 0x04
    113e:	9d 81       	ldd	r25, Y+5	; 0x05
    1140:	02 a0       	ldd	r0, Z+34	; 0x22
    1142:	f3 a1       	ldd	r31, Z+35	; 0x23
    1144:	e0 2d       	mov	r30, r0
    1146:	06 2f       	mov	r16, r22
    1148:	2a 81       	ldd	r18, Y+2	; 0x02
    114a:	bc 01       	movw	r22, r24
    114c:	ce 01       	movw	r24, r28
    114e:	09 95       	icall
		next();
    1150:	e8 81       	ld	r30, Y
    1152:	f9 81       	ldd	r31, Y+1	; 0x01
    1154:	06 a8       	ldd	r0, Z+54	; 0x36
    1156:	f7 a9       	ldd	r31, Z+55	; 0x37
    1158:	e0 2d       	mov	r30, r0
    115a:	ce 01       	movw	r24, r28
    115c:	09 95       	icall
	}
	return *this;
}
    115e:	ce 01       	movw	r24, r28
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	df 90       	pop	r13
    116c:	cf 90       	pop	r12
    116e:	08 95       	ret

00001170 <_Z8tftputchcP6__file>:
	return *this;
}

int tftputch(const char c, FILE *stream)
{
	tft << c;
    1170:	68 2f       	mov	r22, r24
    1172:	8a ef       	ldi	r24, 0xFA	; 250
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5tfthwlsEc>
	return 0;
}
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	08 95       	ret

00001180 <_ZN5tfthwlsEm>:
	}
	return *this;
}

class tfthw& tfthw::operator<<(const uint32_t i)
{
    1180:	4f 92       	push	r4
    1182:	5f 92       	push	r5
    1184:	6f 92       	push	r6
    1186:	7f 92       	push	r7
    1188:	8f 92       	push	r8
    118a:	9f 92       	push	r9
    118c:	af 92       	push	r10
    118e:	bf 92       	push	r11
    1190:	cf 92       	push	r12
    1192:	df 92       	push	r13
    1194:	ef 92       	push	r14
    1196:	ff 92       	push	r15
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	8c 01       	movw	r16, r24
    11a2:	4a 01       	movw	r8, r20
    11a4:	5b 01       	movw	r10, r22
    11a6:	c9 e0       	ldi	r28, 0x09	; 9
    11a8:	d0 e0       	ldi	r29, 0x00	; 0
	uint32_t p = 1000000000;
    11aa:	c1 2c       	mov	r12, r1
    11ac:	8a ec       	ldi	r24, 0xCA	; 202
    11ae:	d8 2e       	mov	r13, r24
    11b0:	8a e9       	ldi	r24, 0x9A	; 154
    11b2:	e8 2e       	mov	r14, r24
    11b4:	8b e3       	ldi	r24, 0x3B	; 59
    11b6:	f8 2e       	mov	r15, r24
	while ((p != 1) && (i / p == 0))
		p /= 10;
    11b8:	9a e0       	ldi	r25, 0x0A	; 10
    11ba:	49 2e       	mov	r4, r25
    11bc:	51 2c       	mov	r5, r1
    11be:	61 2c       	mov	r6, r1
    11c0:	71 2c       	mov	r7, r1
}

class tfthw& tfthw::operator<<(const uint32_t i)
{
	uint32_t p = 1000000000;
	while ((p != 1) && (i / p == 0))
    11c2:	c5 01       	movw	r24, r10
    11c4:	b4 01       	movw	r22, r8
    11c6:	a7 01       	movw	r20, r14
    11c8:	96 01       	movw	r18, r12
    11ca:	0e 94 96 0b 	call	0x172c	; 0x172c <__udivmodsi4>
    11ce:	23 2b       	or	r18, r19
    11d0:	24 2b       	or	r18, r20
    11d2:	25 2b       	or	r18, r21
    11d4:	29 f1       	breq	.+74     	; 0x1220 <_ZN5tfthwlsEm+0xa0>
    11d6:	19 c0       	rjmp	.+50     	; 0x120a <_ZN5tfthwlsEm+0x8a>
		p /= 10;
	while (p != 0) {
		*this << (char)((i / p) % 10 + '0');
    11d8:	c5 01       	movw	r24, r10
    11da:	b4 01       	movw	r22, r8
    11dc:	a7 01       	movw	r20, r14
    11de:	96 01       	movw	r18, r12
    11e0:	0e 94 96 0b 	call	0x172c	; 0x172c <__udivmodsi4>
    11e4:	ca 01       	movw	r24, r20
    11e6:	b9 01       	movw	r22, r18
    11e8:	a3 01       	movw	r20, r6
    11ea:	92 01       	movw	r18, r4
    11ec:	0e 94 96 0b 	call	0x172c	; 0x172c <__udivmodsi4>
    11f0:	60 5d       	subi	r22, 0xD0	; 208
    11f2:	c8 01       	movw	r24, r16
    11f4:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5tfthwlsEc>
		p /= 10;
    11f8:	c7 01       	movw	r24, r14
    11fa:	b6 01       	movw	r22, r12
    11fc:	a3 01       	movw	r20, r6
    11fe:	92 01       	movw	r18, r4
    1200:	0e 94 96 0b 	call	0x172c	; 0x172c <__udivmodsi4>
    1204:	69 01       	movw	r12, r18
    1206:	7a 01       	movw	r14, r20
    1208:	05 c0       	rjmp	.+10     	; 0x1214 <_ZN5tfthwlsEm+0x94>
{
	uint32_t p = 1000000000;
	while ((p != 1) && (i / p == 0))
		p /= 10;
	while (p != 0) {
		*this << (char)((i / p) % 10 + '0');
    120a:	ba e0       	ldi	r27, 0x0A	; 10
    120c:	4b 2e       	mov	r4, r27
    120e:	51 2c       	mov	r5, r1
    1210:	61 2c       	mov	r6, r1
    1212:	71 2c       	mov	r7, r1
class tfthw& tfthw::operator<<(const uint32_t i)
{
	uint32_t p = 1000000000;
	while ((p != 1) && (i / p == 0))
		p /= 10;
	while (p != 0) {
    1214:	c1 14       	cp	r12, r1
    1216:	d1 04       	cpc	r13, r1
    1218:	e1 04       	cpc	r14, r1
    121a:	f1 04       	cpc	r15, r1
    121c:	e9 f6       	brne	.-70     	; 0x11d8 <_ZN5tfthwlsEm+0x58>
    121e:	0b c0       	rjmp	.+22     	; 0x1236 <_ZN5tfthwlsEm+0xb6>

class tfthw& tfthw::operator<<(const uint32_t i)
{
	uint32_t p = 1000000000;
	while ((p != 1) && (i / p == 0))
		p /= 10;
    1220:	c7 01       	movw	r24, r14
    1222:	b6 01       	movw	r22, r12
    1224:	a3 01       	movw	r20, r6
    1226:	92 01       	movw	r18, r4
    1228:	0e 94 96 0b 	call	0x172c	; 0x172c <__udivmodsi4>
    122c:	69 01       	movw	r12, r18
    122e:	7a 01       	movw	r14, r20
    1230:	21 97       	sbiw	r28, 0x01	; 1
}

class tfthw& tfthw::operator<<(const uint32_t i)
{
	uint32_t p = 1000000000;
	while ((p != 1) && (i / p == 0))
    1232:	39 f6       	brne	.-114    	; 0x11c2 <_ZN5tfthwlsEm+0x42>
    1234:	ea cf       	rjmp	.-44     	; 0x120a <_ZN5tfthwlsEm+0x8a>
	while (p != 0) {
		*this << (char)((i / p) % 10 + '0');
		p /= 10;
	}
	return *this;
}
    1236:	c8 01       	movw	r24, r16
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	ff 90       	pop	r15
    1242:	ef 90       	pop	r14
    1244:	df 90       	pop	r13
    1246:	cf 90       	pop	r12
    1248:	bf 90       	pop	r11
    124a:	af 90       	pop	r10
    124c:	9f 90       	pop	r9
    124e:	8f 90       	pop	r8
    1250:	7f 90       	pop	r7
    1252:	6f 90       	pop	r6
    1254:	5f 90       	pop	r5
    1256:	4f 90       	pop	r4
    1258:	08 95       	ret

0000125a <_ZN5tfthwlsEl>:
	}
	return *this;
}

class tfthw& tfthw::operator<<(const int32_t i)
{
    125a:	4f 92       	push	r4
    125c:	5f 92       	push	r5
    125e:	6f 92       	push	r6
    1260:	7f 92       	push	r7
    1262:	8f 92       	push	r8
    1264:	9f 92       	push	r9
    1266:	af 92       	push	r10
    1268:	bf 92       	push	r11
    126a:	cf 92       	push	r12
    126c:	df 92       	push	r13
    126e:	ef 92       	push	r14
    1270:	ff 92       	push	r15
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	8c 01       	movw	r16, r24
	uint32_t p = 1000000000, n = labs(i);
    127c:	4a 01       	movw	r8, r20
    127e:	5b 01       	movw	r10, r22
    1280:	77 ff       	sbrs	r23, 7
    1282:	07 c0       	rjmp	.+14     	; 0x1292 <_ZN5tfthwlsEl+0x38>
    1284:	88 24       	eor	r8, r8
    1286:	99 24       	eor	r9, r9
    1288:	54 01       	movw	r10, r8
    128a:	84 1a       	sub	r8, r20
    128c:	95 0a       	sbc	r9, r21
    128e:	a6 0a       	sbc	r10, r22
    1290:	b7 0a       	sbc	r11, r23
	if (i < 0)
    1292:	77 ff       	sbrs	r23, 7
    1294:	04 c0       	rjmp	.+8      	; 0x129e <_ZN5tfthwlsEl+0x44>
		*this << '-';
    1296:	6d e2       	ldi	r22, 0x2D	; 45
    1298:	c8 01       	movw	r24, r16
    129a:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5tfthwlsEc>
	}
	return *this;
}

class tfthw& tfthw::operator<<(const int32_t i)
{
    129e:	c9 e0       	ldi	r28, 0x09	; 9
    12a0:	d0 e0       	ldi	r29, 0x00	; 0
    12a2:	c1 2c       	mov	r12, r1
    12a4:	3a ec       	ldi	r19, 0xCA	; 202
    12a6:	d3 2e       	mov	r13, r19
    12a8:	3a e9       	ldi	r19, 0x9A	; 154
    12aa:	e3 2e       	mov	r14, r19
    12ac:	3b e3       	ldi	r19, 0x3B	; 59
    12ae:	f3 2e       	mov	r15, r19
	uint32_t p = 1000000000, n = labs(i);
	if (i < 0)
		*this << '-';
	while ((p != 1) && (n / p == 0))
		p /= 10;
    12b0:	4a e0       	ldi	r20, 0x0A	; 10
    12b2:	44 2e       	mov	r4, r20
    12b4:	51 2c       	mov	r5, r1
    12b6:	61 2c       	mov	r6, r1
    12b8:	71 2c       	mov	r7, r1
class tfthw& tfthw::operator<<(const int32_t i)
{
	uint32_t p = 1000000000, n = labs(i);
	if (i < 0)
		*this << '-';
	while ((p != 1) && (n / p == 0))
    12ba:	c5 01       	movw	r24, r10
    12bc:	b4 01       	movw	r22, r8
    12be:	a7 01       	movw	r20, r14
    12c0:	96 01       	movw	r18, r12
    12c2:	0e 94 96 0b 	call	0x172c	; 0x172c <__udivmodsi4>
    12c6:	23 2b       	or	r18, r19
    12c8:	24 2b       	or	r18, r20
    12ca:	25 2b       	or	r18, r21
    12cc:	29 f1       	breq	.+74     	; 0x1318 <_ZN5tfthwlsEl+0xbe>
    12ce:	19 c0       	rjmp	.+50     	; 0x1302 <_ZN5tfthwlsEl+0xa8>
		p /= 10;
	while (p != 0) {
		*this << (char)((n / p) % 10 + '0');
    12d0:	c5 01       	movw	r24, r10
    12d2:	b4 01       	movw	r22, r8
    12d4:	a7 01       	movw	r20, r14
    12d6:	96 01       	movw	r18, r12
    12d8:	0e 94 96 0b 	call	0x172c	; 0x172c <__udivmodsi4>
    12dc:	ca 01       	movw	r24, r20
    12de:	b9 01       	movw	r22, r18
    12e0:	a3 01       	movw	r20, r6
    12e2:	92 01       	movw	r18, r4
    12e4:	0e 94 96 0b 	call	0x172c	; 0x172c <__udivmodsi4>
    12e8:	60 5d       	subi	r22, 0xD0	; 208
    12ea:	c8 01       	movw	r24, r16
    12ec:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5tfthwlsEc>
		p /= 10;
    12f0:	c7 01       	movw	r24, r14
    12f2:	b6 01       	movw	r22, r12
    12f4:	a3 01       	movw	r20, r6
    12f6:	92 01       	movw	r18, r4
    12f8:	0e 94 96 0b 	call	0x172c	; 0x172c <__udivmodsi4>
    12fc:	69 01       	movw	r12, r18
    12fe:	7a 01       	movw	r14, r20
    1300:	05 c0       	rjmp	.+10     	; 0x130c <_ZN5tfthwlsEl+0xb2>
	if (i < 0)
		*this << '-';
	while ((p != 1) && (n / p == 0))
		p /= 10;
	while (p != 0) {
		*this << (char)((n / p) % 10 + '0');
    1302:	2a e0       	ldi	r18, 0x0A	; 10
    1304:	42 2e       	mov	r4, r18
    1306:	51 2c       	mov	r5, r1
    1308:	61 2c       	mov	r6, r1
    130a:	71 2c       	mov	r7, r1
	uint32_t p = 1000000000, n = labs(i);
	if (i < 0)
		*this << '-';
	while ((p != 1) && (n / p == 0))
		p /= 10;
	while (p != 0) {
    130c:	c1 14       	cp	r12, r1
    130e:	d1 04       	cpc	r13, r1
    1310:	e1 04       	cpc	r14, r1
    1312:	f1 04       	cpc	r15, r1
    1314:	e9 f6       	brne	.-70     	; 0x12d0 <_ZN5tfthwlsEl+0x76>
    1316:	0b c0       	rjmp	.+22     	; 0x132e <_ZN5tfthwlsEl+0xd4>
{
	uint32_t p = 1000000000, n = labs(i);
	if (i < 0)
		*this << '-';
	while ((p != 1) && (n / p == 0))
		p /= 10;
    1318:	c7 01       	movw	r24, r14
    131a:	b6 01       	movw	r22, r12
    131c:	a3 01       	movw	r20, r6
    131e:	92 01       	movw	r18, r4
    1320:	0e 94 96 0b 	call	0x172c	; 0x172c <__udivmodsi4>
    1324:	69 01       	movw	r12, r18
    1326:	7a 01       	movw	r14, r20
    1328:	21 97       	sbiw	r28, 0x01	; 1
class tfthw& tfthw::operator<<(const int32_t i)
{
	uint32_t p = 1000000000, n = labs(i);
	if (i < 0)
		*this << '-';
	while ((p != 1) && (n / p == 0))
    132a:	39 f6       	brne	.-114    	; 0x12ba <_ZN5tfthwlsEl+0x60>
    132c:	ea cf       	rjmp	.-44     	; 0x1302 <_ZN5tfthwlsEl+0xa8>
	while (p != 0) {
		*this << (char)((n / p) % 10 + '0');
		p /= 10;
	}
	return *this;
}
    132e:	c8 01       	movw	r24, r16
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	df 90       	pop	r13
    133e:	cf 90       	pop	r12
    1340:	bf 90       	pop	r11
    1342:	af 90       	pop	r10
    1344:	9f 90       	pop	r9
    1346:	8f 90       	pop	r8
    1348:	7f 90       	pop	r7
    134a:	6f 90       	pop	r6
    134c:	5f 90       	pop	r5
    134e:	4f 90       	pop	r4
    1350:	08 95       	ret

00001352 <_ZN5tfthwlsEj>:
	}
	return *this;
}

class tfthw& tfthw::operator<<(const uint16_t i)
{
    1352:	cf 92       	push	r12
    1354:	df 92       	push	r13
    1356:	ef 92       	push	r14
    1358:	ff 92       	push	r15
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	6c 01       	movw	r12, r24
    1364:	8b 01       	movw	r16, r22
    1366:	24 e0       	ldi	r18, 0x04	; 4
    1368:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t p = 10000;
    136a:	c0 e1       	ldi	r28, 0x10	; 16
    136c:	d7 e2       	ldi	r29, 0x27	; 39
	while ((p != 1) && (i / p == 0))
		p /= 10;
    136e:	ea e0       	ldi	r30, 0x0A	; 10
    1370:	f0 e0       	ldi	r31, 0x00	; 0
}

class tfthw& tfthw::operator<<(const uint16_t i)
{
	uint16_t p = 10000;
	while ((p != 1) && (i / p == 0))
    1372:	c8 01       	movw	r24, r16
    1374:	be 01       	movw	r22, r28
    1376:	0e 94 82 0b 	call	0x1704	; 0x1704 <__udivmodhi4>
    137a:	67 2b       	or	r22, r23
    137c:	d1 f0       	breq	.+52     	; 0x13b2 <_ZN5tfthwlsEj+0x60>
    137e:	13 c0       	rjmp	.+38     	; 0x13a6 <_ZN5tfthwlsEj+0x54>
		p /= 10;
	while (p != 0) {
		*this << (char)((i / p) % 10 + '0');
    1380:	c8 01       	movw	r24, r16
    1382:	be 01       	movw	r22, r28
    1384:	0e 94 82 0b 	call	0x1704	; 0x1704 <__udivmodhi4>
    1388:	cb 01       	movw	r24, r22
    138a:	b7 01       	movw	r22, r14
    138c:	0e 94 82 0b 	call	0x1704	; 0x1704 <__udivmodhi4>
    1390:	68 2f       	mov	r22, r24
    1392:	60 5d       	subi	r22, 0xD0	; 208
    1394:	c6 01       	movw	r24, r12
    1396:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5tfthwlsEc>
		p /= 10;
    139a:	ce 01       	movw	r24, r28
    139c:	b7 01       	movw	r22, r14
    139e:	0e 94 82 0b 	call	0x1704	; 0x1704 <__udivmodhi4>
    13a2:	eb 01       	movw	r28, r22
    13a4:	03 c0       	rjmp	.+6      	; 0x13ac <_ZN5tfthwlsEj+0x5a>
{
	uint16_t p = 10000;
	while ((p != 1) && (i / p == 0))
		p /= 10;
	while (p != 0) {
		*this << (char)((i / p) % 10 + '0');
    13a6:	5a e0       	ldi	r21, 0x0A	; 10
    13a8:	e5 2e       	mov	r14, r21
    13aa:	f1 2c       	mov	r15, r1
class tfthw& tfthw::operator<<(const uint16_t i)
{
	uint16_t p = 10000;
	while ((p != 1) && (i / p == 0))
		p /= 10;
	while (p != 0) {
    13ac:	20 97       	sbiw	r28, 0x00	; 0
    13ae:	41 f7       	brne	.-48     	; 0x1380 <_ZN5tfthwlsEj+0x2e>
    13b0:	09 c0       	rjmp	.+18     	; 0x13c4 <_ZN5tfthwlsEj+0x72>

class tfthw& tfthw::operator<<(const uint16_t i)
{
	uint16_t p = 10000;
	while ((p != 1) && (i / p == 0))
		p /= 10;
    13b2:	ce 01       	movw	r24, r28
    13b4:	bf 01       	movw	r22, r30
    13b6:	0e 94 82 0b 	call	0x1704	; 0x1704 <__udivmodhi4>
    13ba:	eb 01       	movw	r28, r22
    13bc:	21 50       	subi	r18, 0x01	; 1
    13be:	31 09       	sbc	r19, r1
}

class tfthw& tfthw::operator<<(const uint16_t i)
{
	uint16_t p = 10000;
	while ((p != 1) && (i / p == 0))
    13c0:	c1 f6       	brne	.-80     	; 0x1372 <_ZN5tfthwlsEj+0x20>
    13c2:	f1 cf       	rjmp	.-30     	; 0x13a6 <_ZN5tfthwlsEj+0x54>
	while (p != 0) {
		*this << (char)((i / p) % 10 + '0');
		p /= 10;
	}
	return *this;
}
    13c4:	c6 01       	movw	r24, r12
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	ff 90       	pop	r15
    13d0:	ef 90       	pop	r14
    13d2:	df 90       	pop	r13
    13d4:	cf 90       	pop	r12
    13d6:	08 95       	ret

000013d8 <_ZN5tfthwlsEi>:
	_setBGLight(false);
	return *this;
}

class tfthw& tfthw::operator<<(const int16_t i)
{
    13d8:	cf 92       	push	r12
    13da:	df 92       	push	r13
    13dc:	ef 92       	push	r14
    13de:	ff 92       	push	r15
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	6c 01       	movw	r12, r24
	uint16_t p = 10000, n = abs(i);
    13ea:	8b 01       	movw	r16, r22
    13ec:	77 ff       	sbrs	r23, 7
    13ee:	04 c0       	rjmp	.+8      	; 0x13f8 <_ZN5tfthwlsEi+0x20>
    13f0:	00 27       	eor	r16, r16
    13f2:	11 27       	eor	r17, r17
    13f4:	06 1b       	sub	r16, r22
    13f6:	17 0b       	sbc	r17, r23
	if (i < 0)
    13f8:	77 ff       	sbrs	r23, 7
    13fa:	04 c0       	rjmp	.+8      	; 0x1404 <_ZN5tfthwlsEi+0x2c>
		*this << '-';
    13fc:	6d e2       	ldi	r22, 0x2D	; 45
    13fe:	c6 01       	movw	r24, r12
    1400:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5tfthwlsEc>
	_setBGLight(false);
	return *this;
}

class tfthw& tfthw::operator<<(const int16_t i)
{
    1404:	24 e0       	ldi	r18, 0x04	; 4
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	c0 e1       	ldi	r28, 0x10	; 16
    140a:	d7 e2       	ldi	r29, 0x27	; 39
	uint16_t p = 10000, n = abs(i);
	if (i < 0)
		*this << '-';
	while ((p != 1) && (n / p == 0))
		p /= 10;
    140c:	ea e0       	ldi	r30, 0x0A	; 10
    140e:	f0 e0       	ldi	r31, 0x00	; 0
class tfthw& tfthw::operator<<(const int16_t i)
{
	uint16_t p = 10000, n = abs(i);
	if (i < 0)
		*this << '-';
	while ((p != 1) && (n / p == 0))
    1410:	c8 01       	movw	r24, r16
    1412:	be 01       	movw	r22, r28
    1414:	0e 94 82 0b 	call	0x1704	; 0x1704 <__udivmodhi4>
    1418:	67 2b       	or	r22, r23
    141a:	d1 f0       	breq	.+52     	; 0x1450 <_ZN5tfthwlsEi+0x78>
    141c:	13 c0       	rjmp	.+38     	; 0x1444 <_ZN5tfthwlsEi+0x6c>
		p /= 10;
	while (p != 0) {
		*this << (char)((n / p) % 10 + '0');
    141e:	c8 01       	movw	r24, r16
    1420:	be 01       	movw	r22, r28
    1422:	0e 94 82 0b 	call	0x1704	; 0x1704 <__udivmodhi4>
    1426:	cb 01       	movw	r24, r22
    1428:	b7 01       	movw	r22, r14
    142a:	0e 94 82 0b 	call	0x1704	; 0x1704 <__udivmodhi4>
    142e:	68 2f       	mov	r22, r24
    1430:	60 5d       	subi	r22, 0xD0	; 208
    1432:	c6 01       	movw	r24, r12
    1434:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5tfthwlsEc>
		p /= 10;
    1438:	ce 01       	movw	r24, r28
    143a:	b7 01       	movw	r22, r14
    143c:	0e 94 82 0b 	call	0x1704	; 0x1704 <__udivmodhi4>
    1440:	eb 01       	movw	r28, r22
    1442:	03 c0       	rjmp	.+6      	; 0x144a <_ZN5tfthwlsEi+0x72>
	if (i < 0)
		*this << '-';
	while ((p != 1) && (n / p == 0))
		p /= 10;
	while (p != 0) {
		*this << (char)((n / p) % 10 + '0');
    1444:	6a e0       	ldi	r22, 0x0A	; 10
    1446:	e6 2e       	mov	r14, r22
    1448:	f1 2c       	mov	r15, r1
	uint16_t p = 10000, n = abs(i);
	if (i < 0)
		*this << '-';
	while ((p != 1) && (n / p == 0))
		p /= 10;
	while (p != 0) {
    144a:	20 97       	sbiw	r28, 0x00	; 0
    144c:	41 f7       	brne	.-48     	; 0x141e <_ZN5tfthwlsEi+0x46>
    144e:	09 c0       	rjmp	.+18     	; 0x1462 <_ZN5tfthwlsEi+0x8a>
{
	uint16_t p = 10000, n = abs(i);
	if (i < 0)
		*this << '-';
	while ((p != 1) && (n / p == 0))
		p /= 10;
    1450:	ce 01       	movw	r24, r28
    1452:	bf 01       	movw	r22, r30
    1454:	0e 94 82 0b 	call	0x1704	; 0x1704 <__udivmodhi4>
    1458:	eb 01       	movw	r28, r22
    145a:	21 50       	subi	r18, 0x01	; 1
    145c:	31 09       	sbc	r19, r1
class tfthw& tfthw::operator<<(const int16_t i)
{
	uint16_t p = 10000, n = abs(i);
	if (i < 0)
		*this << '-';
	while ((p != 1) && (n / p == 0))
    145e:	c1 f6       	brne	.-80     	; 0x1410 <_ZN5tfthwlsEi+0x38>
    1460:	f1 cf       	rjmp	.-30     	; 0x1444 <_ZN5tfthwlsEi+0x6c>
	while (p != 0) {
		*this << (char)((n / p) % 10 + '0');
		p /= 10;
	}
	return *this;
}
    1462:	c6 01       	movw	r24, r12
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	1f 91       	pop	r17
    146a:	0f 91       	pop	r16
    146c:	ff 90       	pop	r15
    146e:	ef 90       	pop	r14
    1470:	df 90       	pop	r13
    1472:	cf 90       	pop	r12
    1474:	08 95       	ret

00001476 <_ZN5tfthwlsEPKc>:
	}
	return *this;
}

class tfthw& tfthw::operator<<(const char *str)
{
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	8c 01       	movw	r16, r24
    1480:	eb 01       	movw	r28, r22
	while (*str) {
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <_ZN5tfthwlsEPKc+0x12>
		*this << *str;
    1484:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5tfthwlsEc>
	return *this;
}

class tfthw& tfthw::operator<<(const char *str)
{
	while (*str) {
    1488:	69 91       	ld	r22, Y+
		*this << *str;
    148a:	c8 01       	movw	r24, r16
	return *this;
}

class tfthw& tfthw::operator<<(const char *str)
{
	while (*str) {
    148c:	61 11       	cpse	r22, r1
    148e:	fa cf       	rjmp	.-12     	; 0x1484 <_ZN5tfthwlsEPKc+0xe>
		*this << *str;
		str++;
	}
	return *this;
}
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	1f 91       	pop	r17
    1496:	0f 91       	pop	r16
    1498:	08 95       	ret

0000149a <_Z6tftoutv>:
    149a:	80 91 0a 02 	lds	r24, 0x020A
    149e:	90 91 0b 02 	lds	r25, 0x020B
    14a2:	89 2b       	or	r24, r25
    14a4:	51 f4       	brne	.+20     	; 0x14ba <_Z6tftoutv+0x20>
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	88 eb       	ldi	r24, 0xB8	; 184
    14ac:	98 e0       	ldi	r25, 0x08	; 8
    14ae:	0e 94 be 0b 	call	0x177c	; 0x177c <fdevopen>
    14b2:	90 93 0b 02 	sts	0x020B, r25
    14b6:	80 93 0a 02 	sts	0x020A, r24
    14ba:	80 91 0a 02 	lds	r24, 0x020A
    14be:	90 91 0b 02 	lds	r25, 0x020B
    14c2:	08 95       	ret

000014c4 <_ZN5tfthw5cleanEv>:
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    14c8:	ec 01       	movw	r28, r24
    14ca:	e8 81       	ld	r30, Y
    14cc:	f9 81       	ldd	r31, Y+1	; 0x01
    14ce:	6e 85       	ldd	r22, Y+14	; 0x0e
    14d0:	7f 85       	ldd	r23, Y+15	; 0x0f
    14d2:	06 8c       	ldd	r0, Z+30	; 0x1e
    14d4:	f7 8d       	ldd	r31, Z+31	; 0x1f
    14d6:	e0 2d       	mov	r30, r0
    14d8:	09 95       	icall
    14da:	1d 82       	std	Y+5, r1	; 0x05
    14dc:	1c 82       	std	Y+4, r1	; 0x04
    14de:	1f 82       	std	Y+7, r1	; 0x07
    14e0:	1e 82       	std	Y+6, r1	; 0x06
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	08 95       	ret

000014e8 <main>:
}

int main(void)
{
	init();
    14e8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_Z4initv>

start:
	tft.clean();
    14ec:	8a ef       	ldi	r24, 0xFA	; 250
    14ee:	91 e0       	ldi	r25, 0x01	; 1
    14f0:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <_ZN5tfthw5cleanEv>
	tft *= 1;
    14f4:	61 e0       	ldi	r22, 0x01	; 1
    14f6:	8a ef       	ldi	r24, 0xFA	; 250
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN5tfthwmLEh>
	puts("*** TFT library testing ***");
    14fe:	86 e0       	ldi	r24, 0x06	; 6
    1500:	91 e0       	ldi	r25, 0x01	; 1
    1502:	0e 94 09 0c 	call	0x1812	; 0x1812 <puts>
	puts("STDOUT output, orientation, FG/BG colour, BG light");
    1506:	82 e2       	ldi	r24, 0x22	; 34
    1508:	91 e0       	ldi	r25, 0x01	; 1
    150a:	0e 94 09 0c 	call	0x1812	; 0x1812 <puts>
	tft *= 3;
    150e:	63 e0       	ldi	r22, 0x03	; 3
    1510:	8a ef       	ldi	r24, 0xFA	; 250
    1512:	91 e0       	ldi	r25, 0x01	; 1
    1514:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN5tfthwmLEh>
	puts("Font size test");
    1518:	85 e5       	ldi	r24, 0x55	; 85
    151a:	91 e0       	ldi	r25, 0x01	; 1
    151c:	0e 94 09 0c 	call	0x1812	; 0x1812 <puts>
	tft *= 1;
    1520:	61 e0       	ldi	r22, 0x01	; 1
    1522:	8a ef       	ldi	r24, 0xFA	; 250
    1524:	91 e0       	ldi	r25, 0x01	; 1
    1526:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN5tfthwmLEh>
	class tfthw& operator*=(uint8_t z);
	class tfthw& operator/=(uint8_t o);

	virtual void setX(uint16_t n) {x = n;}
	virtual void setY(uint16_t n) {y = n;}
	virtual void setXY(uint16_t m, uint16_t n) {x = m; y = n;}
    152a:	8c e2       	ldi	r24, 0x2C	; 44
    152c:	91 e0       	ldi	r25, 0x01	; 1
    152e:	90 93 ff 01 	sts	0x01FF, r25
    1532:	80 93 fe 01 	sts	0x01FE, r24
    1536:	86 e2       	ldi	r24, 0x26	; 38
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	90 93 01 02 	sts	0x0201, r25
    153e:	80 93 00 02 	sts	0x0200, r24
	tft.setXY(300, 38);
	puts("Change text position & word warp test");
    1542:	84 e6       	ldi	r24, 0x64	; 100
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	0e 94 09 0c 	call	0x1812	; 0x1812 <puts>
	tft.frame(105, 56, 200, 10, 2, 0xF800);
    154a:	c1 2c       	mov	r12, r1
    154c:	88 ef       	ldi	r24, 0xF8	; 248
    154e:	d8 2e       	mov	r13, r24
    1550:	92 e0       	ldi	r25, 0x02	; 2
    1552:	e9 2e       	mov	r14, r25
    1554:	0a e0       	ldi	r16, 0x0A	; 10
    1556:	10 e0       	ldi	r17, 0x00	; 0
    1558:	28 ec       	ldi	r18, 0xC8	; 200
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	48 e3       	ldi	r20, 0x38	; 56
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	69 e6       	ldi	r22, 0x69	; 105
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	8a ef       	ldi	r24, 0xFA	; 250
    1566:	91 e0       	ldi	r25, 0x01	; 1
    1568:	0e 94 32 04 	call	0x864	; 0x864 <_ZN5tfthw5frameEjjjjhj>
	puts("Draw frame test");
    156c:	8a e8       	ldi	r24, 0x8A	; 138
    156e:	91 e0       	ldi	r25, 0x01	; 1
    1570:	0e 94 09 0c 	call	0x1812	; 0x1812 <puts>
	tft.rectangle(110, 68, 180, 6, 0x07E0);
    1574:	20 ee       	ldi	r18, 0xE0	; 224
    1576:	e2 2e       	mov	r14, r18
    1578:	27 e0       	ldi	r18, 0x07	; 7
    157a:	f2 2e       	mov	r15, r18
    157c:	06 e0       	ldi	r16, 0x06	; 6
    157e:	10 e0       	ldi	r17, 0x00	; 0
    1580:	24 eb       	ldi	r18, 0xB4	; 180
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	44 e4       	ldi	r20, 0x44	; 68
    1586:	50 e0       	ldi	r21, 0x00	; 0
    1588:	6e e6       	ldi	r22, 0x6E	; 110
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	8a ef       	ldi	r24, 0xFA	; 250
    158e:	91 e0       	ldi	r25, 0x01	; 1
    1590:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_ZN5tfthw9rectangleEjjjjj>
	puts("Draw reangle test");
    1594:	8a e9       	ldi	r24, 0x9A	; 154
    1596:	91 e0       	ldi	r25, 0x01	; 1
    1598:	0e 94 09 0c 	call	0x1812	; 0x1812 <puts>
	tft.point(120, 76, 0x001F);
    159c:	2f e1       	ldi	r18, 0x1F	; 31
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	4c e4       	ldi	r20, 0x4C	; 76
    15a2:	50 e0       	ldi	r21, 0x00	; 0
    15a4:	68 e7       	ldi	r22, 0x78	; 120
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	8a ef       	ldi	r24, 0xFA	; 250
    15aa:	91 e0       	ldi	r25, 0x01	; 1
    15ac:	0e 94 64 07 	call	0xec8	; 0xec8 <_ZN5tfthw5pointEjjj>
	tft.point(122, 76, 0x001F);
    15b0:	2f e1       	ldi	r18, 0x1F	; 31
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	4c e4       	ldi	r20, 0x4C	; 76
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	6a e7       	ldi	r22, 0x7A	; 122
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	8a ef       	ldi	r24, 0xFA	; 250
    15be:	91 e0       	ldi	r25, 0x01	; 1
    15c0:	0e 94 64 07 	call	0xec8	; 0xec8 <_ZN5tfthw5pointEjjj>
	tft.point(124, 76, 0x001F);
    15c4:	2f e1       	ldi	r18, 0x1F	; 31
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	4c e4       	ldi	r20, 0x4C	; 76
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	6c e7       	ldi	r22, 0x7C	; 124
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	8a ef       	ldi	r24, 0xFA	; 250
    15d2:	91 e0       	ldi	r25, 0x01	; 1
    15d4:	0e 94 64 07 	call	0xec8	; 0xec8 <_ZN5tfthw5pointEjjj>
	tft.point(126, 76, 0x001F);
    15d8:	2f e1       	ldi	r18, 0x1F	; 31
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	4c e4       	ldi	r20, 0x4C	; 76
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	6e e7       	ldi	r22, 0x7E	; 126
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	8a ef       	ldi	r24, 0xFA	; 250
    15e6:	91 e0       	ldi	r25, 0x01	; 1
    15e8:	0e 94 64 07 	call	0xec8	; 0xec8 <_ZN5tfthw5pointEjjj>
	tft.point(128, 76, 0x001F);
    15ec:	2f e1       	ldi	r18, 0x1F	; 31
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	4c e4       	ldi	r20, 0x4C	; 76
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	60 e8       	ldi	r22, 0x80	; 128
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	8a ef       	ldi	r24, 0xFA	; 250
    15fa:	91 e0       	ldi	r25, 0x01	; 1
    15fc:	0e 94 64 07 	call	0xec8	; 0xec8 <_ZN5tfthw5pointEjjj>
	tft.point(130, 76, 0x001F);
    1600:	2f e1       	ldi	r18, 0x1F	; 31
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	4c e4       	ldi	r20, 0x4C	; 76
    1606:	50 e0       	ldi	r21, 0x00	; 0
    1608:	62 e8       	ldi	r22, 0x82	; 130
    160a:	70 e0       	ldi	r23, 0x00	; 0
    160c:	8a ef       	ldi	r24, 0xFA	; 250
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	0e 94 64 07 	call	0xec8	; 0xec8 <_ZN5tfthw5pointEjjj>
	puts("Draw points test");
    1614:	8c ea       	ldi	r24, 0xAC	; 172
    1616:	91 e0       	ldi	r25, 0x01	; 1
    1618:	0e 94 09 0c 	call	0x1812	; 0x1812 <puts>
	tft.line(200, 100, 300, 200, 0xF800);
    161c:	e1 2c       	mov	r14, r1
    161e:	38 ef       	ldi	r19, 0xF8	; 248
    1620:	f3 2e       	mov	r15, r19
    1622:	08 ec       	ldi	r16, 0xC8	; 200
    1624:	10 e0       	ldi	r17, 0x00	; 0
    1626:	2c e2       	ldi	r18, 0x2C	; 44
    1628:	31 e0       	ldi	r19, 0x01	; 1
    162a:	44 e6       	ldi	r20, 0x64	; 100
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	68 ec       	ldi	r22, 0xC8	; 200
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	8a ef       	ldi	r24, 0xFA	; 250
    1634:	91 e0       	ldi	r25, 0x01	; 1
    1636:	0e 94 b7 04 	call	0x96e	; 0x96e <_ZN5tfthw4lineEjjjjj>
	tft.line(310, 210, 210, 110, 0x001F);
    163a:	4f e1       	ldi	r20, 0x1F	; 31
    163c:	e4 2e       	mov	r14, r20
    163e:	f1 2c       	mov	r15, r1
    1640:	0e e6       	ldi	r16, 0x6E	; 110
    1642:	10 e0       	ldi	r17, 0x00	; 0
    1644:	22 ed       	ldi	r18, 0xD2	; 210
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	42 ed       	ldi	r20, 0xD2	; 210
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	66 e3       	ldi	r22, 0x36	; 54
    164e:	71 e0       	ldi	r23, 0x01	; 1
    1650:	8a ef       	ldi	r24, 0xFA	; 250
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	0e 94 b7 04 	call	0x96e	; 0x96e <_ZN5tfthw4lineEjjjjj>
	tft.line(200, 200, 300, 100, 0xF800);
    1658:	e1 2c       	mov	r14, r1
    165a:	58 ef       	ldi	r21, 0xF8	; 248
    165c:	f5 2e       	mov	r15, r21
    165e:	04 e6       	ldi	r16, 0x64	; 100
    1660:	10 e0       	ldi	r17, 0x00	; 0
    1662:	2c e2       	ldi	r18, 0x2C	; 44
    1664:	31 e0       	ldi	r19, 0x01	; 1
    1666:	48 ec       	ldi	r20, 0xC8	; 200
    1668:	50 e0       	ldi	r21, 0x00	; 0
    166a:	68 ec       	ldi	r22, 0xC8	; 200
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	8a ef       	ldi	r24, 0xFA	; 250
    1670:	91 e0       	ldi	r25, 0x01	; 1
    1672:	0e 94 b7 04 	call	0x96e	; 0x96e <_ZN5tfthw4lineEjjjjj>
	tft.line(210, 210, 310, 110, 0x001F);
    1676:	6f e1       	ldi	r22, 0x1F	; 31
    1678:	e6 2e       	mov	r14, r22
    167a:	f1 2c       	mov	r15, r1
    167c:	0e e6       	ldi	r16, 0x6E	; 110
    167e:	10 e0       	ldi	r17, 0x00	; 0
    1680:	26 e3       	ldi	r18, 0x36	; 54
    1682:	31 e0       	ldi	r19, 0x01	; 1
    1684:	42 ed       	ldi	r20, 0xD2	; 210
    1686:	50 e0       	ldi	r21, 0x00	; 0
    1688:	62 ed       	ldi	r22, 0xD2	; 210
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	8a ef       	ldi	r24, 0xFA	; 250
    168e:	91 e0       	ldi	r25, 0x01	; 1
    1690:	0e 94 b7 04 	call	0x96e	; 0x96e <_ZN5tfthw4lineEjjjjj>
    1694:	ff cf       	rjmp	.-2      	; 0x1694 <main+0x1ac>

00001696 <_ZN5tfthw4setXEj>:
	class tfthw& operator++(int x);
	class tfthw& operator--(int x);
	class tfthw& operator*=(uint8_t z);
	class tfthw& operator/=(uint8_t o);

	virtual void setX(uint16_t n) {x = n;}
    1696:	fc 01       	movw	r30, r24
    1698:	75 83       	std	Z+5, r23	; 0x05
    169a:	64 83       	std	Z+4, r22	; 0x04
    169c:	08 95       	ret

0000169e <_ZN5tfthw4setYEj>:
	virtual void setY(uint16_t n) {y = n;}
    169e:	fc 01       	movw	r30, r24
    16a0:	77 83       	std	Z+7, r23	; 0x07
    16a2:	66 83       	std	Z+6, r22	; 0x06
    16a4:	08 95       	ret

000016a6 <_ZN5tfthw5setXYEjj>:
	virtual void setXY(uint16_t m, uint16_t n) {x = m; y = n;}
    16a6:	fc 01       	movw	r30, r24
    16a8:	75 83       	std	Z+5, r23	; 0x05
    16aa:	64 83       	std	Z+4, r22	; 0x04
    16ac:	57 83       	std	Z+7, r21	; 0x07
    16ae:	46 83       	std	Z+6, r20	; 0x06
    16b0:	08 95       	ret

000016b2 <_ZN5tfthw4getXEv>:
	virtual uint16_t getX(void) {return x;}
    16b2:	fc 01       	movw	r30, r24
    16b4:	84 81       	ldd	r24, Z+4	; 0x04
    16b6:	95 81       	ldd	r25, Z+5	; 0x05
    16b8:	08 95       	ret

000016ba <_ZN5tfthw4getYEv>:
	virtual uint16_t getY(void) {return y;}
    16ba:	fc 01       	movw	r30, r24
    16bc:	86 81       	ldd	r24, Z+6	; 0x06
    16be:	97 81       	ldd	r25, Z+7	; 0x07
    16c0:	08 95       	ret

000016c2 <_ZN5tfthw13setForegroundEj>:
	virtual void setForeground(uint16_t c) {fc = c;}
    16c2:	fc 01       	movw	r30, r24
    16c4:	75 87       	std	Z+13, r23	; 0x0d
    16c6:	64 87       	std	Z+12, r22	; 0x0c
    16c8:	08 95       	ret

000016ca <_ZN5tfthw13setBackgroundEj>:
	virtual void setBackground(uint16_t c) {bc = c;}
    16ca:	fc 01       	movw	r30, r24
    16cc:	77 87       	std	Z+15, r23	; 0x0f
    16ce:	66 87       	std	Z+14, r22	; 0x0e
    16d0:	08 95       	ret

000016d2 <_ZN5tfthw13getForegroundEv>:
	virtual uint8_t getForeground(void) {return fc;}
    16d2:	fc 01       	movw	r30, r24
    16d4:	84 85       	ldd	r24, Z+12	; 0x0c
    16d6:	08 95       	ret

000016d8 <_ZN5tfthw13getBackgroundEv>:
	virtual uint8_t getBackground(void) {return bc;}
    16d8:	fc 01       	movw	r30, r24
    16da:	86 85       	ldd	r24, Z+14	; 0x0e
    16dc:	08 95       	ret

000016de <_ZN5tfthw9getOrientEv>:
	virtual void setOrient(uint8_t o);
	virtual uint8_t getOrient(void) {return orient;}
    16de:	fc 01       	movw	r30, r24
    16e0:	83 81       	ldd	r24, Z+3	; 0x03
    16e2:	08 95       	ret

000016e4 <_GLOBAL__sub_I_tft>:
	(x) = (x) ^ (y); \
}

#include <avr/pgmspace.h>

class tfthw tft;
    16e4:	8a ef       	ldi	r24, 0xFA	; 250
    16e6:	91 e0       	ldi	r25, 0x01	; 1
    16e8:	0c 94 39 08 	jmp	0x1072	; 0x1072 <_ZN5tfthwC1Ev>

000016ec <__udivmodqi4>:
    16ec:	99 1b       	sub	r25, r25
    16ee:	79 e0       	ldi	r23, 0x09	; 9
    16f0:	04 c0       	rjmp	.+8      	; 0x16fa <__udivmodqi4_ep>

000016f2 <__udivmodqi4_loop>:
    16f2:	99 1f       	adc	r25, r25
    16f4:	96 17       	cp	r25, r22
    16f6:	08 f0       	brcs	.+2      	; 0x16fa <__udivmodqi4_ep>
    16f8:	96 1b       	sub	r25, r22

000016fa <__udivmodqi4_ep>:
    16fa:	88 1f       	adc	r24, r24
    16fc:	7a 95       	dec	r23
    16fe:	c9 f7       	brne	.-14     	; 0x16f2 <__udivmodqi4_loop>
    1700:	80 95       	com	r24
    1702:	08 95       	ret

00001704 <__udivmodhi4>:
    1704:	aa 1b       	sub	r26, r26
    1706:	bb 1b       	sub	r27, r27
    1708:	51 e1       	ldi	r21, 0x11	; 17
    170a:	07 c0       	rjmp	.+14     	; 0x171a <__udivmodhi4_ep>

0000170c <__udivmodhi4_loop>:
    170c:	aa 1f       	adc	r26, r26
    170e:	bb 1f       	adc	r27, r27
    1710:	a6 17       	cp	r26, r22
    1712:	b7 07       	cpc	r27, r23
    1714:	10 f0       	brcs	.+4      	; 0x171a <__udivmodhi4_ep>
    1716:	a6 1b       	sub	r26, r22
    1718:	b7 0b       	sbc	r27, r23

0000171a <__udivmodhi4_ep>:
    171a:	88 1f       	adc	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	5a 95       	dec	r21
    1720:	a9 f7       	brne	.-22     	; 0x170c <__udivmodhi4_loop>
    1722:	80 95       	com	r24
    1724:	90 95       	com	r25
    1726:	bc 01       	movw	r22, r24
    1728:	cd 01       	movw	r24, r26
    172a:	08 95       	ret

0000172c <__udivmodsi4>:
    172c:	a1 e2       	ldi	r26, 0x21	; 33
    172e:	1a 2e       	mov	r1, r26
    1730:	aa 1b       	sub	r26, r26
    1732:	bb 1b       	sub	r27, r27
    1734:	fd 01       	movw	r30, r26
    1736:	0d c0       	rjmp	.+26     	; 0x1752 <__udivmodsi4_ep>

00001738 <__udivmodsi4_loop>:
    1738:	aa 1f       	adc	r26, r26
    173a:	bb 1f       	adc	r27, r27
    173c:	ee 1f       	adc	r30, r30
    173e:	ff 1f       	adc	r31, r31
    1740:	a2 17       	cp	r26, r18
    1742:	b3 07       	cpc	r27, r19
    1744:	e4 07       	cpc	r30, r20
    1746:	f5 07       	cpc	r31, r21
    1748:	20 f0       	brcs	.+8      	; 0x1752 <__udivmodsi4_ep>
    174a:	a2 1b       	sub	r26, r18
    174c:	b3 0b       	sbc	r27, r19
    174e:	e4 0b       	sbc	r30, r20
    1750:	f5 0b       	sbc	r31, r21

00001752 <__udivmodsi4_ep>:
    1752:	66 1f       	adc	r22, r22
    1754:	77 1f       	adc	r23, r23
    1756:	88 1f       	adc	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	1a 94       	dec	r1
    175c:	69 f7       	brne	.-38     	; 0x1738 <__udivmodsi4_loop>
    175e:	60 95       	com	r22
    1760:	70 95       	com	r23
    1762:	80 95       	com	r24
    1764:	90 95       	com	r25
    1766:	9b 01       	movw	r18, r22
    1768:	ac 01       	movw	r20, r24
    176a:	bd 01       	movw	r22, r26
    176c:	cf 01       	movw	r24, r30
    176e:	08 95       	ret

00001770 <__tablejump2__>:
    1770:	ee 0f       	add	r30, r30
    1772:	ff 1f       	adc	r31, r31

00001774 <__tablejump__>:
    1774:	05 90       	lpm	r0, Z+
    1776:	f4 91       	lpm	r31, Z+
    1778:	e0 2d       	mov	r30, r0
    177a:	09 94       	ijmp

0000177c <fdevopen>:
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	ec 01       	movw	r28, r24
    1786:	8b 01       	movw	r16, r22
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	31 f4       	brne	.+12     	; 0x1798 <fdevopen+0x1c>
    178c:	61 15       	cp	r22, r1
    178e:	71 05       	cpc	r23, r1
    1790:	19 f4       	brne	.+6      	; 0x1798 <fdevopen+0x1c>
    1792:	e0 e0       	ldi	r30, 0x00	; 0
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	37 c0       	rjmp	.+110    	; 0x1806 <fdevopen+0x8a>
    1798:	6e e0       	ldi	r22, 0x0E	; 14
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	0e 94 38 0c 	call	0x1870	; 0x1870 <calloc>
    17a4:	fc 01       	movw	r30, r24
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	a1 f3       	breq	.-24     	; 0x1792 <fdevopen+0x16>
    17aa:	80 e8       	ldi	r24, 0x80	; 128
    17ac:	83 83       	std	Z+3, r24	; 0x03
    17ae:	01 15       	cp	r16, r1
    17b0:	11 05       	cpc	r17, r1
    17b2:	71 f0       	breq	.+28     	; 0x17d0 <fdevopen+0x54>
    17b4:	13 87       	std	Z+11, r17	; 0x0b
    17b6:	02 87       	std	Z+10, r16	; 0x0a
    17b8:	81 e8       	ldi	r24, 0x81	; 129
    17ba:	83 83       	std	Z+3, r24	; 0x03
    17bc:	80 91 0c 02 	lds	r24, 0x020C
    17c0:	90 91 0d 02 	lds	r25, 0x020D
    17c4:	89 2b       	or	r24, r25
    17c6:	21 f4       	brne	.+8      	; 0x17d0 <fdevopen+0x54>
    17c8:	f0 93 0d 02 	sts	0x020D, r31
    17cc:	e0 93 0c 02 	sts	0x020C, r30
    17d0:	20 97       	sbiw	r28, 0x00	; 0
    17d2:	c9 f0       	breq	.+50     	; 0x1806 <fdevopen+0x8a>
    17d4:	d1 87       	std	Z+9, r29	; 0x09
    17d6:	c0 87       	std	Z+8, r28	; 0x08
    17d8:	83 81       	ldd	r24, Z+3	; 0x03
    17da:	82 60       	ori	r24, 0x02	; 2
    17dc:	83 83       	std	Z+3, r24	; 0x03
    17de:	80 91 0e 02 	lds	r24, 0x020E
    17e2:	90 91 0f 02 	lds	r25, 0x020F
    17e6:	89 2b       	or	r24, r25
    17e8:	71 f4       	brne	.+28     	; 0x1806 <fdevopen+0x8a>
    17ea:	f0 93 0f 02 	sts	0x020F, r31
    17ee:	e0 93 0e 02 	sts	0x020E, r30
    17f2:	80 91 10 02 	lds	r24, 0x0210
    17f6:	90 91 11 02 	lds	r25, 0x0211
    17fa:	89 2b       	or	r24, r25
    17fc:	21 f4       	brne	.+8      	; 0x1806 <fdevopen+0x8a>
    17fe:	f0 93 11 02 	sts	0x0211, r31
    1802:	e0 93 10 02 	sts	0x0210, r30
    1806:	cf 01       	movw	r24, r30
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	08 95       	ret

00001812 <puts>:
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	8c 01       	movw	r16, r24
    181c:	e0 91 0e 02 	lds	r30, 0x020E
    1820:	f0 91 0f 02 	lds	r31, 0x020F
    1824:	83 81       	ldd	r24, Z+3	; 0x03
    1826:	81 ff       	sbrs	r24, 1
    1828:	1b c0       	rjmp	.+54     	; 0x1860 <puts+0x4e>
    182a:	c0 e0       	ldi	r28, 0x00	; 0
    182c:	d0 e0       	ldi	r29, 0x00	; 0
    182e:	05 c0       	rjmp	.+10     	; 0x183a <puts+0x28>
    1830:	09 95       	icall
    1832:	89 2b       	or	r24, r25
    1834:	11 f0       	breq	.+4      	; 0x183a <puts+0x28>
    1836:	cf ef       	ldi	r28, 0xFF	; 255
    1838:	df ef       	ldi	r29, 0xFF	; 255
    183a:	f8 01       	movw	r30, r16
    183c:	81 91       	ld	r24, Z+
    183e:	8f 01       	movw	r16, r30
    1840:	60 91 0e 02 	lds	r22, 0x020E
    1844:	70 91 0f 02 	lds	r23, 0x020F
    1848:	db 01       	movw	r26, r22
    184a:	18 96       	adiw	r26, 0x08	; 8
    184c:	ed 91       	ld	r30, X+
    184e:	fc 91       	ld	r31, X
    1850:	19 97       	sbiw	r26, 0x09	; 9
    1852:	81 11       	cpse	r24, r1
    1854:	ed cf       	rjmp	.-38     	; 0x1830 <puts+0x1e>
    1856:	8a e0       	ldi	r24, 0x0A	; 10
    1858:	09 95       	icall
    185a:	89 2b       	or	r24, r25
    185c:	09 f4       	brne	.+2      	; 0x1860 <puts+0x4e>
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <puts+0x52>
    1860:	cf ef       	ldi	r28, 0xFF	; 255
    1862:	df ef       	ldi	r29, 0xFF	; 255
    1864:	ce 01       	movw	r24, r28
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	1f 91       	pop	r17
    186c:	0f 91       	pop	r16
    186e:	08 95       	ret

00001870 <calloc>:
    1870:	0f 93       	push	r16
    1872:	1f 93       	push	r17
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	68 9f       	mul	r22, r24
    187a:	80 01       	movw	r16, r0
    187c:	69 9f       	mul	r22, r25
    187e:	10 0d       	add	r17, r0
    1880:	78 9f       	mul	r23, r24
    1882:	10 0d       	add	r17, r0
    1884:	11 24       	eor	r1, r1
    1886:	c8 01       	movw	r24, r16
    1888:	0e 94 56 0c 	call	0x18ac	; 0x18ac <malloc>
    188c:	c8 2f       	mov	r28, r24
    188e:	d9 2f       	mov	r29, r25
    1890:	20 97       	sbiw	r28, 0x00	; 0
    1892:	31 f0       	breq	.+12     	; 0x18a0 <calloc+0x30>
    1894:	a8 01       	movw	r20, r16
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	8c 2f       	mov	r24, r28
    189c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <memset>
    18a0:	ce 01       	movw	r24, r28
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	1f 91       	pop	r17
    18a8:	0f 91       	pop	r16
    18aa:	08 95       	ret

000018ac <malloc>:
    18ac:	0f 93       	push	r16
    18ae:	1f 93       	push	r17
    18b0:	cf 93       	push	r28
    18b2:	df 93       	push	r29
    18b4:	82 30       	cpi	r24, 0x02	; 2
    18b6:	91 05       	cpc	r25, r1
    18b8:	10 f4       	brcc	.+4      	; 0x18be <malloc+0x12>
    18ba:	82 e0       	ldi	r24, 0x02	; 2
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	e0 91 14 02 	lds	r30, 0x0214
    18c2:	f0 91 15 02 	lds	r31, 0x0215
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	c0 e0       	ldi	r28, 0x00	; 0
    18cc:	d0 e0       	ldi	r29, 0x00	; 0
    18ce:	23 c0       	rjmp	.+70     	; 0x1916 <malloc+0x6a>
    18d0:	40 81       	ld	r20, Z
    18d2:	51 81       	ldd	r21, Z+1	; 0x01
    18d4:	48 17       	cp	r20, r24
    18d6:	59 07       	cpc	r21, r25
    18d8:	a8 f0       	brcs	.+42     	; 0x1904 <malloc+0x58>
    18da:	48 17       	cp	r20, r24
    18dc:	59 07       	cpc	r21, r25
    18de:	61 f4       	brne	.+24     	; 0x18f8 <malloc+0x4c>
    18e0:	82 81       	ldd	r24, Z+2	; 0x02
    18e2:	93 81       	ldd	r25, Z+3	; 0x03
    18e4:	20 97       	sbiw	r28, 0x00	; 0
    18e6:	19 f0       	breq	.+6      	; 0x18ee <malloc+0x42>
    18e8:	9b 83       	std	Y+3, r25	; 0x03
    18ea:	8a 83       	std	Y+2, r24	; 0x02
    18ec:	2e c0       	rjmp	.+92     	; 0x194a <malloc+0x9e>
    18ee:	90 93 15 02 	sts	0x0215, r25
    18f2:	80 93 14 02 	sts	0x0214, r24
    18f6:	29 c0       	rjmp	.+82     	; 0x194a <malloc+0x9e>
    18f8:	21 15       	cp	r18, r1
    18fa:	31 05       	cpc	r19, r1
    18fc:	29 f0       	breq	.+10     	; 0x1908 <malloc+0x5c>
    18fe:	42 17       	cp	r20, r18
    1900:	53 07       	cpc	r21, r19
    1902:	10 f0       	brcs	.+4      	; 0x1908 <malloc+0x5c>
    1904:	a9 01       	movw	r20, r18
    1906:	02 c0       	rjmp	.+4      	; 0x190c <malloc+0x60>
    1908:	be 01       	movw	r22, r28
    190a:	df 01       	movw	r26, r30
    190c:	02 81       	ldd	r16, Z+2	; 0x02
    190e:	13 81       	ldd	r17, Z+3	; 0x03
    1910:	ef 01       	movw	r28, r30
    1912:	9a 01       	movw	r18, r20
    1914:	f8 01       	movw	r30, r16
    1916:	30 97       	sbiw	r30, 0x00	; 0
    1918:	d9 f6       	brne	.-74     	; 0x18d0 <malloc+0x24>
    191a:	21 15       	cp	r18, r1
    191c:	31 05       	cpc	r19, r1
    191e:	09 f1       	breq	.+66     	; 0x1962 <malloc+0xb6>
    1920:	28 1b       	sub	r18, r24
    1922:	39 0b       	sbc	r19, r25
    1924:	24 30       	cpi	r18, 0x04	; 4
    1926:	31 05       	cpc	r19, r1
    1928:	90 f4       	brcc	.+36     	; 0x194e <malloc+0xa2>
    192a:	12 96       	adiw	r26, 0x02	; 2
    192c:	8d 91       	ld	r24, X+
    192e:	9c 91       	ld	r25, X
    1930:	13 97       	sbiw	r26, 0x03	; 3
    1932:	61 15       	cp	r22, r1
    1934:	71 05       	cpc	r23, r1
    1936:	21 f0       	breq	.+8      	; 0x1940 <malloc+0x94>
    1938:	fb 01       	movw	r30, r22
    193a:	93 83       	std	Z+3, r25	; 0x03
    193c:	82 83       	std	Z+2, r24	; 0x02
    193e:	04 c0       	rjmp	.+8      	; 0x1948 <malloc+0x9c>
    1940:	90 93 15 02 	sts	0x0215, r25
    1944:	80 93 14 02 	sts	0x0214, r24
    1948:	fd 01       	movw	r30, r26
    194a:	32 96       	adiw	r30, 0x02	; 2
    194c:	44 c0       	rjmp	.+136    	; 0x19d6 <malloc+0x12a>
    194e:	fd 01       	movw	r30, r26
    1950:	e2 0f       	add	r30, r18
    1952:	f3 1f       	adc	r31, r19
    1954:	81 93       	st	Z+, r24
    1956:	91 93       	st	Z+, r25
    1958:	22 50       	subi	r18, 0x02	; 2
    195a:	31 09       	sbc	r19, r1
    195c:	2d 93       	st	X+, r18
    195e:	3c 93       	st	X, r19
    1960:	3a c0       	rjmp	.+116    	; 0x19d6 <malloc+0x12a>
    1962:	20 91 12 02 	lds	r18, 0x0212
    1966:	30 91 13 02 	lds	r19, 0x0213
    196a:	23 2b       	or	r18, r19
    196c:	41 f4       	brne	.+16     	; 0x197e <malloc+0xd2>
    196e:	20 91 02 01 	lds	r18, 0x0102
    1972:	30 91 03 01 	lds	r19, 0x0103
    1976:	30 93 13 02 	sts	0x0213, r19
    197a:	20 93 12 02 	sts	0x0212, r18
    197e:	20 91 00 01 	lds	r18, 0x0100
    1982:	30 91 01 01 	lds	r19, 0x0101
    1986:	21 15       	cp	r18, r1
    1988:	31 05       	cpc	r19, r1
    198a:	41 f4       	brne	.+16     	; 0x199c <malloc+0xf0>
    198c:	2d b7       	in	r18, 0x3d	; 61
    198e:	3e b7       	in	r19, 0x3e	; 62
    1990:	40 91 04 01 	lds	r20, 0x0104
    1994:	50 91 05 01 	lds	r21, 0x0105
    1998:	24 1b       	sub	r18, r20
    199a:	35 0b       	sbc	r19, r21
    199c:	e0 91 12 02 	lds	r30, 0x0212
    19a0:	f0 91 13 02 	lds	r31, 0x0213
    19a4:	e2 17       	cp	r30, r18
    19a6:	f3 07       	cpc	r31, r19
    19a8:	a0 f4       	brcc	.+40     	; 0x19d2 <malloc+0x126>
    19aa:	2e 1b       	sub	r18, r30
    19ac:	3f 0b       	sbc	r19, r31
    19ae:	28 17       	cp	r18, r24
    19b0:	39 07       	cpc	r19, r25
    19b2:	78 f0       	brcs	.+30     	; 0x19d2 <malloc+0x126>
    19b4:	ac 01       	movw	r20, r24
    19b6:	4e 5f       	subi	r20, 0xFE	; 254
    19b8:	5f 4f       	sbci	r21, 0xFF	; 255
    19ba:	24 17       	cp	r18, r20
    19bc:	35 07       	cpc	r19, r21
    19be:	48 f0       	brcs	.+18     	; 0x19d2 <malloc+0x126>
    19c0:	4e 0f       	add	r20, r30
    19c2:	5f 1f       	adc	r21, r31
    19c4:	50 93 13 02 	sts	0x0213, r21
    19c8:	40 93 12 02 	sts	0x0212, r20
    19cc:	81 93       	st	Z+, r24
    19ce:	91 93       	st	Z+, r25
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <malloc+0x12a>
    19d2:	e0 e0       	ldi	r30, 0x00	; 0
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	cf 01       	movw	r24, r30
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	08 95       	ret

000019e2 <free>:
    19e2:	ef 92       	push	r14
    19e4:	ff 92       	push	r15
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <free+0x12>
    19f2:	8e c0       	rjmp	.+284    	; 0x1b10 <free+0x12e>
    19f4:	dc 01       	movw	r26, r24
    19f6:	12 97       	sbiw	r26, 0x02	; 2
    19f8:	13 96       	adiw	r26, 0x03	; 3
    19fa:	1c 92       	st	X, r1
    19fc:	1e 92       	st	-X, r1
    19fe:	12 97       	sbiw	r26, 0x02	; 2
    1a00:	e0 90 14 02 	lds	r14, 0x0214
    1a04:	f0 90 15 02 	lds	r15, 0x0215
    1a08:	e1 14       	cp	r14, r1
    1a0a:	f1 04       	cpc	r15, r1
    1a0c:	89 f4       	brne	.+34     	; 0x1a30 <free+0x4e>
    1a0e:	2d 91       	ld	r18, X+
    1a10:	3c 91       	ld	r19, X
    1a12:	11 97       	sbiw	r26, 0x01	; 1
    1a14:	28 0f       	add	r18, r24
    1a16:	39 1f       	adc	r19, r25
    1a18:	80 91 12 02 	lds	r24, 0x0212
    1a1c:	90 91 13 02 	lds	r25, 0x0213
    1a20:	82 17       	cp	r24, r18
    1a22:	93 07       	cpc	r25, r19
    1a24:	89 f5       	brne	.+98     	; 0x1a88 <free+0xa6>
    1a26:	b0 93 13 02 	sts	0x0213, r27
    1a2a:	a0 93 12 02 	sts	0x0212, r26
    1a2e:	70 c0       	rjmp	.+224    	; 0x1b10 <free+0x12e>
    1a30:	e7 01       	movw	r28, r14
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	01 c0       	rjmp	.+2      	; 0x1a3a <free+0x58>
    1a38:	ea 01       	movw	r28, r20
    1a3a:	ca 17       	cp	r28, r26
    1a3c:	db 07       	cpc	r29, r27
    1a3e:	38 f4       	brcc	.+14     	; 0x1a4e <free+0x6c>
    1a40:	4a 81       	ldd	r20, Y+2	; 0x02
    1a42:	5b 81       	ldd	r21, Y+3	; 0x03
    1a44:	9e 01       	movw	r18, r28
    1a46:	41 15       	cp	r20, r1
    1a48:	51 05       	cpc	r21, r1
    1a4a:	b1 f7       	brne	.-20     	; 0x1a38 <free+0x56>
    1a4c:	22 c0       	rjmp	.+68     	; 0x1a92 <free+0xb0>
    1a4e:	ac 01       	movw	r20, r24
    1a50:	42 50       	subi	r20, 0x02	; 2
    1a52:	51 09       	sbc	r21, r1
    1a54:	fa 01       	movw	r30, r20
    1a56:	d3 83       	std	Z+3, r29	; 0x03
    1a58:	c2 83       	std	Z+2, r28	; 0x02
    1a5a:	00 81       	ld	r16, Z
    1a5c:	11 81       	ldd	r17, Z+1	; 0x01
    1a5e:	bc 01       	movw	r22, r24
    1a60:	60 0f       	add	r22, r16
    1a62:	71 1f       	adc	r23, r17
    1a64:	6c 17       	cp	r22, r28
    1a66:	7d 07       	cpc	r23, r29
    1a68:	61 f4       	brne	.+24     	; 0x1a82 <free+0xa0>
    1a6a:	68 81       	ld	r22, Y
    1a6c:	79 81       	ldd	r23, Y+1	; 0x01
    1a6e:	60 0f       	add	r22, r16
    1a70:	71 1f       	adc	r23, r17
    1a72:	6e 5f       	subi	r22, 0xFE	; 254
    1a74:	7f 4f       	sbci	r23, 0xFF	; 255
    1a76:	71 83       	std	Z+1, r23	; 0x01
    1a78:	60 83       	st	Z, r22
    1a7a:	6a 81       	ldd	r22, Y+2	; 0x02
    1a7c:	7b 81       	ldd	r23, Y+3	; 0x03
    1a7e:	73 83       	std	Z+3, r23	; 0x03
    1a80:	62 83       	std	Z+2, r22	; 0x02
    1a82:	21 15       	cp	r18, r1
    1a84:	31 05       	cpc	r19, r1
    1a86:	29 f4       	brne	.+10     	; 0x1a92 <free+0xb0>
    1a88:	b0 93 15 02 	sts	0x0215, r27
    1a8c:	a0 93 14 02 	sts	0x0214, r26
    1a90:	3f c0       	rjmp	.+126    	; 0x1b10 <free+0x12e>
    1a92:	f9 01       	movw	r30, r18
    1a94:	b3 83       	std	Z+3, r27	; 0x03
    1a96:	a2 83       	std	Z+2, r26	; 0x02
    1a98:	e9 01       	movw	r28, r18
    1a9a:	49 91       	ld	r20, Y+
    1a9c:	59 91       	ld	r21, Y+
    1a9e:	c4 0f       	add	r28, r20
    1aa0:	d5 1f       	adc	r29, r21
    1aa2:	ac 17       	cp	r26, r28
    1aa4:	bd 07       	cpc	r27, r29
    1aa6:	71 f4       	brne	.+28     	; 0x1ac4 <free+0xe2>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	9e 91       	ld	r25, -X
    1aac:	8e 91       	ld	r24, -X
    1aae:	84 0f       	add	r24, r20
    1ab0:	95 1f       	adc	r25, r21
    1ab2:	02 96       	adiw	r24, 0x02	; 2
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	80 83       	st	Z, r24
    1ab8:	12 96       	adiw	r26, 0x02	; 2
    1aba:	8d 91       	ld	r24, X+
    1abc:	9c 91       	ld	r25, X
    1abe:	13 97       	sbiw	r26, 0x03	; 3
    1ac0:	93 83       	std	Z+3, r25	; 0x03
    1ac2:	82 83       	std	Z+2, r24	; 0x02
    1ac4:	a0 e0       	ldi	r26, 0x00	; 0
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <free+0xec>
    1aca:	d7 01       	movw	r26, r14
    1acc:	7c 01       	movw	r14, r24
    1ace:	f7 01       	movw	r30, r14
    1ad0:	82 81       	ldd	r24, Z+2	; 0x02
    1ad2:	93 81       	ldd	r25, Z+3	; 0x03
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	c9 f7       	brne	.-14     	; 0x1aca <free+0xe8>
    1ad8:	c7 01       	movw	r24, r14
    1ada:	02 96       	adiw	r24, 0x02	; 2
    1adc:	20 81       	ld	r18, Z
    1ade:	31 81       	ldd	r19, Z+1	; 0x01
    1ae0:	82 0f       	add	r24, r18
    1ae2:	93 1f       	adc	r25, r19
    1ae4:	20 91 12 02 	lds	r18, 0x0212
    1ae8:	30 91 13 02 	lds	r19, 0x0213
    1aec:	28 17       	cp	r18, r24
    1aee:	39 07       	cpc	r19, r25
    1af0:	79 f4       	brne	.+30     	; 0x1b10 <free+0x12e>
    1af2:	10 97       	sbiw	r26, 0x00	; 0
    1af4:	29 f4       	brne	.+10     	; 0x1b00 <free+0x11e>
    1af6:	10 92 15 02 	sts	0x0215, r1
    1afa:	10 92 14 02 	sts	0x0214, r1
    1afe:	04 c0       	rjmp	.+8      	; 0x1b08 <free+0x126>
    1b00:	13 96       	adiw	r26, 0x03	; 3
    1b02:	1c 92       	st	X, r1
    1b04:	1e 92       	st	-X, r1
    1b06:	12 97       	sbiw	r26, 0x02	; 2
    1b08:	f0 92 13 02 	sts	0x0213, r15
    1b0c:	e0 92 12 02 	sts	0x0212, r14
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	e6 e0       	ldi	r30, 0x06	; 6
    1b16:	0c 94 a0 0d 	jmp	0x1b40	; 0x1b40 <__epilogue_restores__+0x18>

00001b1a <memset>:
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	01 c0       	rjmp	.+2      	; 0x1b20 <memset+0x6>
    1b1e:	6d 93       	st	X+, r22
    1b20:	41 50       	subi	r20, 0x01	; 1
    1b22:	50 40       	sbci	r21, 0x00	; 0
    1b24:	e0 f7       	brcc	.-8      	; 0x1b1e <memset+0x4>
    1b26:	08 95       	ret

00001b28 <__epilogue_restores__>:
    1b28:	2a 88       	ldd	r2, Y+18	; 0x12
    1b2a:	39 88       	ldd	r3, Y+17	; 0x11
    1b2c:	48 88       	ldd	r4, Y+16	; 0x10
    1b2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b30:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b32:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b34:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b36:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b38:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b3a:	b9 84       	ldd	r11, Y+9	; 0x09
    1b3c:	c8 84       	ldd	r12, Y+8	; 0x08
    1b3e:	df 80       	ldd	r13, Y+7	; 0x07
    1b40:	ee 80       	ldd	r14, Y+6	; 0x06
    1b42:	fd 80       	ldd	r15, Y+5	; 0x05
    1b44:	0c 81       	ldd	r16, Y+4	; 0x04
    1b46:	1b 81       	ldd	r17, Y+3	; 0x03
    1b48:	aa 81       	ldd	r26, Y+2	; 0x02
    1b4a:	b9 81       	ldd	r27, Y+1	; 0x01
    1b4c:	ce 0f       	add	r28, r30
    1b4e:	d1 1d       	adc	r29, r1
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	ed 01       	movw	r28, r26
    1b5c:	08 95       	ret

00001b5e <_exit>:
    1b5e:	f8 94       	cli

00001b60 <__stop_program>:
    1b60:	ff cf       	rjmp	.-2      	; 0x1b60 <__stop_program>
